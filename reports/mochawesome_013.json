{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-14T16:06:27.044Z",
    "end": "2025-08-14T16:06:36.690Z",
    "duration": 9646,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c8b49c87-12b5-4dad-b628-d9bd5c6871db",
      "title": "",
      "fullFile": "cypress\\e2e\\dynamicpagePOM.cy.js",
      "file": "cypress\\e2e\\dynamicpagePOM.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0987cd5f-2a3a-4cb7-975e-0f2c8e39ad07",
          "title": "Dynamic Content Validation",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should detect dynamic content change after refresh",
              "fullTitle": "Dynamic Content Validation should detect dynamic content change after refresh",
              "timedOut": null,
              "duration": 9552,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/dynamic-content');\n// Step 1: Get initial content\nlet firstLoadContent = [];\n_dynamicpage.default.getTextBlocks().then($blocks => {\n  $blocks.each((index, el) => {\n    firstLoadContent.push(el.innerText.trim());\n  });\n  // Step 2: Refresh the page\n  cy.reload();\n  // Step 3: Get new content\n  let secondLoadContent = [];\n  _dynamicpage.default.getTextBlocks().then($newBlocks => {\n    $newBlocks.each((index, el) => {\n      secondLoadContent.push(el.innerText.trim());\n    });\n    // Step 4: Compare the content\n    _dynamicpage.default.compareContent(firstLoadContent, secondLoadContent);\n  });\n});",
              "err": {},
              "uuid": "90813074-1d78-46d6-b250-77e872bdf1c9",
              "parentUUID": "0987cd5f-2a3a-4cb7-975e-0f2c8e39ad07",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "90813074-1d78-46d6-b250-77e872bdf1c9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9552,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}