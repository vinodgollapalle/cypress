{
  "stats": {
    "suites": 57,
    "tests": 172,
    "passes": 166,
    "pending": 0,
    "failures": 6,
    "testsRegistered": 172,
    "passPercent": 96.51162790697674,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2025-08-12T06:51:58.737Z",
    "end": "2025-08-12T06:56:42.630Z",
    "duration": 283893
  },
  "results": [
    {
      "uuid": "064682bf-37c9-4b92-b537-1a5d8c07819e",
      "title": "",
      "fullFile": "cypress\\e2e\\arrowFunction.cy.js",
      "file": "cypress\\e2e\\arrowFunction.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9250f1ac-d873-4a49-a771-cba1b65240e6",
          "title": "Multiply three Numbers Example",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Multiplies three numbers",
              "fullTitle": "Multiply three Numbers Example Multiplies three numbers",
              "timedOut": null,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const multiplyThreeNumbers = (a, b, c) => a * b * c;\nconst result = multiplyThreeNumbers(4, 6, 8);\ncy.log(`The multiplication of three numbers: ${result}`);",
              "err": {},
              "uuid": "14e956d7-dca6-42ce-a79a-68c6fa7eb729",
              "parentUUID": "9250f1ac-d873-4a49-a771-cba1b65240e6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "14e956d7-dca6-42ce-a79a-68c6fa7eb729"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "a9ca3116-bf69-48bf-b661-0e581e6a9afe",
      "title": "",
      "fullFile": "cypress\\e2e\\assertionsExamples.cy.js",
      "file": "cypress\\e2e\\assertionsExamples.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "01e4181c-d5f8-4ce8-bf0f-f9a1c0021d1f",
          "title": "Assertions Page - Cypress Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should assert element existence, visibility, and text content",
              "fullTitle": "Assertions Page - Cypress Tests should assert element existence, visibility, and text content",
              "timedOut": null,
              "duration": 2296,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://practice.expandtesting.com/#assertions');\n//Assert: Element exists\ncy.get('.btn-warning').should('exist');\n//cy.get('#exist-element') .should('exist');\n// Assert: Element has specific text\ncy.get('.btn-primary').should('have.text', 'Test Cases');\n// Assert: Element is visible\ncy.get('.btn-success').should('be.visible');",
              "err": {},
              "uuid": "ba109af5-e036-46c2-bd10-482e64ad44aa",
              "parentUUID": "01e4181c-d5f8-4ce8-bf0f-f9a1c0021d1f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ba109af5-e036-46c2-bd10-482e64ad44aa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2296,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "6bbc50f2-d41a-462e-b5e7-2ba843151a2c",
      "title": "",
      "fullFile": "cypress\\e2e\\checkboxInteractions_2a.cy.js",
      "file": "cypress\\e2e\\checkboxInteractions_2a.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f5ccd3ce-89c0-4b46-a123-5690e5d72a67",
          "title": "Checkboxes",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "check and uncheck each checkbox",
              "fullTitle": "Checkboxes check and uncheck each checkbox",
              "timedOut": null,
              "duration": 1682,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://practice.expandtesting.com/checkboxes');\n// Step 2: Locate all checkboxes (assume input[type=\"checkbox\"] is used)\ncy.get('input[type=\"checkbox\"]').each($checkbox => {\n  // Step 3: Check the checkbox\n  cy.wrap($checkbox).check().should('be.checked');\n  // Step 4: Uncheck the checkbox\n  cy.wrap($checkbox).uncheck().should('not.be.checked');\n});",
              "err": {},
              "uuid": "93f6f31c-1ba8-4d0d-9aa9-8afdbd3d6f57",
              "parentUUID": "f5ccd3ce-89c0-4b46-a123-5690e5d72a67",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "93f6f31c-1ba8-4d0d-9aa9-8afdbd3d6f57"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1682,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "227943bb-fb87-45a1-9ffc-d347a3d1c341",
      "title": "",
      "fullFile": "cypress\\e2e\\checkboxPOM.cy.js",
      "file": "cypress\\e2e\\checkboxPOM.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3ad55666-7841-47a6-8f8c-f4cb2e88c5ce",
          "title": "Checkboxes Test with POM",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should check the first checkbox and uncheck the second",
              "fullTitle": "Checkboxes Test with POM Should check the first checkbox and uncheck the second",
              "timedOut": null,
              "duration": 1382,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "checkboxPage.checkFirstBox();\ncheckboxPage.uncheckSecondBox();\ncheckboxPage.validateCheckboxState([true, false]); // Validate both checkboxes",
              "err": {},
              "uuid": "2ecf7355-1a08-4dcf-b03e-5296eb599166",
              "parentUUID": "3ad55666-7841-47a6-8f8c-f4cb2e88c5ce",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2ecf7355-1a08-4dcf-b03e-5296eb599166"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1382,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "efc574ed-b3b9-4636-af08-f6e9b0a5a7b1",
      "title": "",
      "fullFile": "cypress\\e2e\\contextmenuPOM.cy.js",
      "file": "cypress\\e2e\\contextmenuPOM.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bd484371-73eb-48d8-8b20-bf5bb3a4869d",
          "title": "Context Menu Interaction Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should right click the box and validate the alert message",
              "fullTitle": "Context Menu Interaction Test Should right click the box and validate the alert message",
              "timedOut": null,
              "duration": 1506,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "contextMenuPage.rightClickBox();\n//cy.get('a[target=\"_blank\"]').invoke('removeAttr', 'target').click();\ncontextMenuPage.handleAlert('You selected a context menu');",
              "err": {},
              "uuid": "0af23264-dcbf-4d9e-8724-4fb93feded00",
              "parentUUID": "bd484371-73eb-48d8-8b20-bf5bb3a4869d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0af23264-dcbf-4d9e-8724-4fb93feded00"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1506,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "186909f0-73d1-4972-88c3-8484cf0cefb2",
      "title": "",
      "fullFile": "cypress\\e2e\\createNoteAPI.cy.js",
      "file": "cypress\\e2e\\createNoteAPI.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "56ed1a48-1682-4cb4-b2d7-6bed048b93e1",
          "title": "Create a Note",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "create a note and return an ID",
              "fullTitle": "Create a Note create a note and return an ID",
              "timedOut": null,
              "duration": 971,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'https://practice.expandtesting.com/notes/api/notes',\n  headers: {\n    'x-auth-token': token,\n    'Content-Type': 'application/json'\n  },\n  body: {\n    title: 'Test Note',\n    description: 'This is a test note created through API testing.',\n    category: 'Work'\n  }\n}).then(response => {\n  console.log('Response Body:', response.body);\n  cy.log(JSON.stringify(response.body));\n  // Basic response check\n  expect(response.status).to.eq(200);\n  // Adjust according to the actual structure\n  expect(response.body).to.have.property('data');\n  expect(response.body.data).to.have.property('id');\n  expect(response.body.data.title).to.eq('Test Note');\n});",
              "err": {},
              "uuid": "a85b97ce-1744-4d9b-8ca3-5fc79f1940fb",
              "parentUUID": "56ed1a48-1682-4cb4-b2d7-6bed048b93e1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a85b97ce-1744-4d9b-8ca3-5fc79f1940fb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 971,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "5bf38201-2040-46a1-bb86-f78b93dc860c",
      "title": "",
      "fullFile": "cypress\\e2e\\dataTypes.cy.js",
      "file": "cypress\\e2e\\dataTypes.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "54d6a001-1f25-45d9-82a7-10a78b3b801b",
          "title": "datatypes",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "arraydatatype",
              "fullTitle": "datatypes arraydatatype",
              "timedOut": null,
              "duration": 41,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let numbers = [1, 2, 3, 4, 5];\nlet sum = 0;\nfor (let i = 0; i < numbers.length; i++) {\n  sum += numbers[i];\n  cy.log(\"Sum of the numbers is:\", sum);\n}",
              "err": {},
              "uuid": "4a956b54-7d97-456e-a66f-10808d03ed87",
              "parentUUID": "54d6a001-1f25-45d9-82a7-10a78b3b801b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4a956b54-7d97-456e-a66f-10808d03ed87"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 41,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "2359141a-08e5-4f03-9f47-1208a556796c",
      "title": "",
      "fullFile": "cypress\\e2e\\declareVariables.cy.js",
      "file": "cypress\\e2e\\declareVariables.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6408115e-331b-42f5-ad15-6b9afd27e014",
          "title": "variabledeclaration",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "variablelet",
              "fullTitle": "variabledeclaration variablelet",
              "timedOut": null,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let b = 2;\nb = 3;\ncy.log(b);",
              "err": {},
              "uuid": "1e47c79b-55e6-4385-b1d7-98f12cfb44f8",
              "parentUUID": "6408115e-331b-42f5-ad15-6b9afd27e014",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "variableconst",
              "fullTitle": "variabledeclaration variableconst",
              "timedOut": null,
              "duration": 225,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"\\\\declareVariables.cy.js\\\\variabledeclaration -- variableconst (failed).png\"\n    ]\n  ]\n}",
              "code": "const c = 3;\nc = 4; //throws Error",
              "err": {
                "message": "TypeError: Assignment to constant variable.",
                "estack": "TypeError: Assignment to constant variable.\n    at Context.eval (webpack://cypress/./cypress/e2e/declareVariables.cy.js:14:1)\n    at runnable.fn (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:141791:19)\n    at callFn (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:160869:21)\n    at Runnable.run (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:160856:7)\n    at <unknown> (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:166946:30)\n    at PassThroughHandlerContext.finallyHandler (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:4042:23)\n    at PassThroughHandlerContext.tryCatcher (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise._settlePromiseFromHandler (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:1489:31)\n    at Promise._settlePromise (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:1546:18)",
                "diff": null
              },
              "uuid": "f2de1fad-2b98-4365-a13e-5a5dd3a88967",
              "parentUUID": "6408115e-331b-42f5-ad15-6b9afd27e014",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1e47c79b-55e6-4385-b1d7-98f12cfb44f8"
          ],
          "failures": [
            "f2de1fad-2b98-4365-a13e-5a5dd3a88967"
          ],
          "pending": [],
          "skipped": [],
          "duration": 254,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "b066ddea-a073-4619-bee2-a0dea9e6a073",
      "title": "",
      "fullFile": "cypress\\e2e\\deleteNoteAPI.cy.js",
      "file": "cypress\\e2e\\deleteNoteAPI.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "49080fcf-7bb7-46a6-a8fd-192abe33c5e2",
          "title": "Delete a test note and validate cleanup",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deletes a note and confirms deletion",
              "fullTitle": "Delete a test note and validate cleanup Deletes a note and confirms deletion",
              "timedOut": null,
              "duration": 694,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: DELETE /notes/{id}\ncy.request({\n  method: 'DELETE',\n  url: `${baseUrl}/${noteId}`,\n  headers: {\n    Authorization: `Bearer ${token}`\n  },\n  failOnStatusCode: false\n}).then(response => {\n  // Step 2: Confirm status 204\n  expect(response.status).to.eq(200);\n});\n// Step 3: GET /notes and confirm note is gone\ncy.request({\n  method: 'GET',\n  url: baseUrl,\n  headers: {\n    Authorization: `Bearer ${token}`\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  //  //Validate the noteId no longer exists in the list\n  // const notes = response.body\n  // const found = notes.find(note => note.id === noteId)\n  // expect(found).to.be.undefined\n});",
              "err": {},
              "uuid": "000dfa2a-7012-4458-9b6a-27a358c66a81",
              "parentUUID": "49080fcf-7bb7-46a6-a8fd-192abe33c5e2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "000dfa2a-7012-4458-9b6a-27a358c66a81"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 694,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "a6259431-316b-43c4-b97e-58840b14e27c",
      "title": "",
      "fullFile": "cypress\\e2e\\deleteNotesAPI.cy.js",
      "file": "cypress\\e2e\\deleteNotesAPI.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Delete NotesAPI",
          "fullTitle": "Delete NotesAPI",
          "timedOut": null,
          "duration": 238,
          "state": "failed",
          "speed": null,
          "pass": false,
          "fail": true,
          "pending": false,
          "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"\\\\deleteNotesAPI.cy.js\\\\Delete NotesAPI (failed).png\"\n    ]\n  ]\n}",
          "code": "cy.get('@token').then(token => {\n  cy.get('@noteId').then(noteId => {\n    cy.request({\n      method: 'DELETE',\n      url: `https://practice.expandtesting.com/notes/api/notes/${noteId}`,\n      headers: {\n        'x-auth-token': token\n      },\n      body: noteData\n    }).then(res => {\n      cy.log(res);\n      expect(res.status).to.eq(200);\n      expect(res.body.message).to.eq('Note successfully deleted');\n    });\n  });\n});",
          "err": {
            "message": "CypressError: `cy.get()` could not find a registered alias for: `@token`.\nYou have not aliased anything yet.",
            "estack": "CypressError: `cy.get()` could not find a registered alias for: `@token`.\nYou have not aliased anything yet.\n    at $Cy.aliasNotFoundFor (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:135777:66)\n    at $Cy.getAlias (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:135720:12)\n    at <unknown> (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:135281:21)\n    at Object.subjectFn (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:147319:16)\n    at $Cy.verifyUpcomingAssertions (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:146641:31)\n    at onRetry (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:147310:15)\n    at retryQuery (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:147323:10)\n    at <unknown> (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:147476:17)\n    at tryCatcher (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise._settlePromiseFromHandler (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:1489:31)\n    at Promise._settlePromise (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:1546:18)\n    at Promise._settlePromiseCtx (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:1583:10)\n    at _drainQueueStep (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:2381:12)\n    at _drainQueue (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:2370:9)\n    at Async._drainQueues (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:2386:5)\n    at Async.drainQueues (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:2256:14)\nFrom Your Spec Code:\n    at Context.eval (webpack://cypress/./cypress/e2e/deleteNotesAPI.cy.js:2:7)",
            "diff": null
          },
          "uuid": "dfb1ac16-a9db-41b4-913a-44c641808446",
          "parentUUID": "a6259431-316b-43c4-b97e-58840b14e27c",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [],
      "passes": [],
      "failures": [
        "dfb1ac16-a9db-41b4-913a-44c641808446"
      ],
      "pending": [],
      "skipped": [],
      "duration": 238,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    },
    {
      "uuid": "b3f70643-c431-4ff1-bcf4-edaf8827d581",
      "title": "",
      "fullFile": "cypress\\e2e\\dropdownPOM.cy.js",
      "file": "cypress\\e2e\\dropdownPOM.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "733ec688-63ae-4528-8488-a6163fef3959",
          "title": "Dropdown Handling Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should select Option 1 and validate",
              "fullTitle": "Dropdown Handling Tests Should select Option 1 and validate",
              "timedOut": null,
              "duration": 1557,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dropdownPage.selectOption('Option 1');\ndropdownPage.getSelectedOption().should('have.text', 'Option 1');",
              "err": {},
              "uuid": "007600b0-6b68-4902-8fbd-f0019a120f13",
              "parentUUID": "733ec688-63ae-4528-8488-a6163fef3959",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should select Option 2 and validate",
              "fullTitle": "Dropdown Handling Tests Should select Option 2 and validate",
              "timedOut": null,
              "duration": 1383,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dropdownPage.selectOption('Option 2');\ndropdownPage.getSelectedOption().should('have.text', 'Option 2');",
              "err": {},
              "uuid": "59359448-39d5-4c53-bd77-710c53004397",
              "parentUUID": "733ec688-63ae-4528-8488-a6163fef3959",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "007600b0-6b68-4902-8fbd-f0019a120f13",
            "59359448-39d5-4c53-bd77-710c53004397"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2940,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "ea6470d5-c3a1-4a85-b05e-740c899e3f39",
      "title": "",
      "fullFile": "cypress\\e2e\\dropdown_2b.cy.js",
      "file": "cypress\\e2e\\dropdown_2b.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "42b61f81-4e75-41c9-a67f-9fe03de678d9",
          "title": "Select \"India\" from the dropdown",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "select India from the country dropdown",
              "fullTitle": "Select \"India\" from the dropdown select India from the country dropdown",
              "timedOut": null,
              "duration": 1297,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Visit the dropdown page\ncy.visit('https://practice.expandtesting.com/dropdown');\n// Select \"India\" from the dropdown by visible text\ncy.get('#country').select('India').should('have.value', 'IN');",
              "err": {},
              "uuid": "81a2e3d8-8271-4793-973c-d90186992ec4",
              "parentUUID": "42b61f81-4e75-41c9-a67f-9fe03de678d9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "81a2e3d8-8271-4793-973c-d90186992ec4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1297,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3547fda6-ba6e-449e-8c5c-6a1bea3cdfbb",
      "title": "",
      "fullFile": "cypress\\e2e\\dynamicHTMLTable_7.cy.js",
      "file": "cypress\\e2e\\dynamicHTMLTable_7.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "13fadbdf-61fb-453f-b4e7-bec3f1afa5a5",
          "title": "Log browser name and CPU usage on dynamic-table",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Logs browser and CPU usage",
              "fullTitle": "Log browser name and CPU usage on dynamic-table Logs browser and CPU usage",
              "timedOut": null,
              "duration": 1219,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://practice.expandtesting.com/dynamic-table');\ncy.get('table.table-striped tbody tr').each(($row, index) => {\n  const browserName = $row.find('td').eq(0).text();\n  const cpuUsage = $row.find('td').eq(2).text();\n  cy.get('table.table-striped tbody tr').should('have.length.at.least', 1);\n  cy.log(`Row ${index + 1}: Browser = ${browserName}, CPU Usage = ${cpuUsage}`);\n  expect(browserName).to.not.be.empty;\n  expect(cpuUsage).to.not.be.empty;\n});",
              "err": {},
              "uuid": "a216cec8-0f21-4826-be98-0c8532cb27fd",
              "parentUUID": "13fadbdf-61fb-453f-b4e7-bec3f1afa5a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Assert No cell is empty and Verify at least one browser has CPU usage above 15%",
              "fullTitle": "Log browser name and CPU usage on dynamic-table Assert No cell is empty and Verify at least one browser has CPU usage above 15%",
              "timedOut": null,
              "duration": 1299,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://practice.expandtesting.com/dynamic-table');\nlet cpuAbove15Found = false;\ncy.get(\"table.table-striped tbody tr\").each(($row, rowIndex, $rows) => {\n  const $cells = $row.find('td');\n  const browserName = $cells.eq(0).text().trim(); // 1. Assert browser name is not empty\n  expect(browserName).to.not.be.empty;\n  $cells.each((i, td) => {\n    const cellText = td.innerText;\n    expect(cellText).to.not.be.empty; // 2. Assert no cell is empty\n  });\n  const cpuCell = [...$cells].find(td => td.innerText.includes('%')); // 3. Check if any CPU usage > 15%\n  if (cpuCell) {\n    const cpuValue = parseFloat(cpuCell.innerText.replace('%', ''));\n    if (cpuValue > 15) {\n      cpuAbove15Found = true;\n    }\n  }\n}).then(() => {\n  expect(cpuAbove15Found, \"CPU Usage above 15 not found\").to.be.false; // Final assertion after looping all rows\n});",
              "err": {},
              "uuid": "e6606f9a-ace2-4dfb-be14-51ce303ed9c7",
              "parentUUID": "13fadbdf-61fb-453f-b4e7-bec3f1afa5a5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a216cec8-0f21-4826-be98-0c8532cb27fd",
            "e6606f9a-ace2-4dfb-be14-51ce303ed9c7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2518,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "4310b4f7-77af-4151-9537-e321f6f8cbed",
      "title": "",
      "fullFile": "cypress\\e2e\\dynamicpagePOM.cy.js",
      "file": "cypress\\e2e\\dynamicpagePOM.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a7141670-fdc0-421d-b2b9-ba125fdc6d74",
          "title": "Dynamic Content Validation",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should detect dynamic content change after refresh",
              "fullTitle": "Dynamic Content Validation should detect dynamic content change after refresh",
              "timedOut": null,
              "duration": 2503,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/dynamic-content');\n// Step 1: Get initial content\nlet firstLoadContent = [];\n_dynamicpage.default.getTextBlocks().then($blocks => {\n  $blocks.each((index, el) => {\n    firstLoadContent.push(el.innerText.trim());\n  });\n  // Step 2: Refresh the page\n  cy.reload();\n  // Step 3: Get new content\n  let secondLoadContent = [];\n  _dynamicpage.default.getTextBlocks().then($newBlocks => {\n    $newBlocks.each((index, el) => {\n      secondLoadContent.push(el.innerText.trim());\n    });\n    // Step 4: Compare the content\n    _dynamicpage.default.compareContent(firstLoadContent, secondLoadContent);\n  });\n});",
              "err": {},
              "uuid": "2b20ba32-8c13-477c-86e7-6e16ef6a7bd2",
              "parentUUID": "a7141670-fdc0-421d-b2b9-ba125fdc6d74",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2b20ba32-8c13-477c-86e7-6e16ef6a7bd2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2503,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3d76c450-94af-4aee-9fc7-33faa02cc96b",
      "title": "",
      "fullFile": "cypress\\e2e\\extractandassertTabledata_6.cy.js",
      "file": "cypress\\e2e\\extractandassertTabledata_6.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "78b322eb-608e-4cf5-aeb2-21dd704d7b12",
          "title": "Find the column index for \"Memory\" and Print each row browser and corresponding memory usage",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Find the column index for \"Memory\"",
              "fullTitle": "Find the column index for \"Memory\" and Print each row browser and corresponding memory usage Find the column index for \"Memory\"",
              "timedOut": null,
              "duration": 1187,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://practice.expandtesting.com/dynamic-table');\ncy.get(\"table.table-striped thead tr th\").then($tr => {\n  let memoryColumnIndex = -1;\n  $tr.each((index, th) => {\n    const tr = th.innerText;\n    if (tr == 'Memory') {\n      memoryColumnIndex = index;\n    }\n  });\n  cy.log('Memory column index: ', memoryColumnIndex);\n  cy.get(\"table.table-striped tbody tr\").each($trow => {\n    const $cells = $trow.find('td');\n    const browserName = $cells.eq(0).text().trim();\n    const memory = $cells.eq(memoryColumnIndex).text();\n    cy.log(browserName, ' Memory:', memory);\n  });\n});",
              "err": {},
              "uuid": "d32225d1-70bd-4437-a498-94a744541cb6",
              "parentUUID": "78b322eb-608e-4cf5-aeb2-21dd704d7b12",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d32225d1-70bd-4437-a498-94a744541cb6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1187,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "4dd71a30-90a6-457f-b5b3-3f66bdd0c594",
      "title": "",
      "fullFile": "cypress\\e2e\\fetchAllnotesAPI.cy.js",
      "file": "cypress\\e2e\\fetchAllnotesAPI.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "99dd83d2-11aa-4067-82d2-44c6bb620742",
          "title": "Fetch All Notes",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "create a new note",
              "fullTitle": "Fetch All Notes create a new note",
              "timedOut": null,
              "duration": 910,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 2: Create a note\ncy.request({\n  method: 'POST',\n  url: 'https://practice.expandtesting.com/notes/api/notes',\n  headers: {\n    'x-auth-token': token,\n    'Content-Type': 'application/json'\n  },\n  body: {\n    title: noteTitle,\n    description: noteDescription,\n    category: 'Personal'\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  createdNoteId = response.body.data.id;\n  expect(createdNoteId).to.exist;\n});",
              "err": {},
              "uuid": "bbdcd282-68ba-4a18-9fef-d676296a14de",
              "parentUUID": "99dd83d2-11aa-4067-82d2-44c6bb620742",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch all notes and contain the newly created note",
              "fullTitle": "Fetch All Notes should fetch all notes and contain the newly created note",
              "timedOut": null,
              "duration": 395,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 3: Fetch all notes\ncy.request({\n  method: 'GET',\n  url: 'https://practice.expandtesting.com/notes/api/notes',\n  headers: {\n    'x-auth-token': token\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('data');\n  expect(response.body.data).to.be.an('array');\n  // Step 4: Assert the created note exists in the array\n  const found = response.body.data.find(note =>\n  //note.id === createdNoteId && note.title === noteTitle\n  note.title === noteTitle && note.description === noteDescription);\n  expect(found, 'Newly created note should be in the list').to.exist;\n});",
              "err": {},
              "uuid": "e8a592b9-43d9-4e1c-ab84-6b216b2e0ab2",
              "parentUUID": "99dd83d2-11aa-4067-82d2-44c6bb620742",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bbdcd282-68ba-4a18-9fef-d676296a14de",
            "e8a592b9-43d9-4e1c-ab84-6b216b2e0ab2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1305,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "5738c24b-acd8-458a-9825-845c190c44ea",
      "title": "",
      "fullFile": "cypress\\e2e\\functionDeclaration.cy.js",
      "file": "cypress\\e2e\\functionDeclaration.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "061a090e-c290-47c6-ac41-1ac62cde329e",
          "title": "Logging Example",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Logs the welcome message",
              "fullTitle": "Logging Example Logs the welcome message",
              "timedOut": null,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "logWelcome();",
              "err": {},
              "uuid": "f4a4b886-71bd-4566-85b9-9bcfb0b748db",
              "parentUUID": "061a090e-c290-47c6-ac41-1ac62cde329e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f4a4b886-71bd-4566-85b9-9bcfb0b748db"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 36,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "f909fd22-0c32-4966-884c-b6b5840c6ce0",
      "title": "",
      "fullFile": "cypress\\e2e\\functionExpression.cy.js",
      "file": "cypress\\e2e\\functionExpression.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "142de756-2f8d-4a8d-9b41-488bdc80fb05",
          "title": "function expression",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Logs user email",
              "fullTitle": "function expression Logs user email",
              "timedOut": null,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const printUserEmail = function (email) {\n  cy.log(` User email: ${email}`);\n};\nprintUserEmail('cypresstesting@com');",
              "err": {},
              "uuid": "c24634ab-4d6e-46bd-8a47-471d26b0f3cf",
              "parentUUID": "142de756-2f8d-4a8d-9b41-488bdc80fb05",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c24634ab-4d6e-46bd-8a47-471d26b0f3cf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 32,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "bc003c73-8107-444f-aa33-51a49b03902c",
      "title": "",
      "fullFile": "cypress\\e2e\\functionswithevenorodd.cy.js",
      "file": "cypress\\e2e\\functionswithevenorodd.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "348620d5-9863-46bb-9e8a-5d5b1ab8368c",
          "title": "OddorEven",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "OddorEven",
              "fullTitle": "OddorEven OddorEven",
              "timedOut": null,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "function evenorodd(number) {\n  if (number % 2 === 0) {\n    cy.log(\"Even\");\n  } else {\n    cy.log(\"Odd\");\n  }\n}\nlet s = evenorodd(6);\ncy.log(s);",
              "err": {},
              "uuid": "4a788e65-b5af-40e5-9c41-d8dae5e7847b",
              "parentUUID": "348620d5-9863-46bb-9e8a-5d5b1ab8368c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4a788e65-b5af-40e5-9c41-d8dae5e7847b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 37,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "4fad843c-0b0b-4252-a242-6a15026d862a",
      "title": "",
      "fullFile": "cypress\\e2e\\loginFunctionalityNegative.cy.js",
      "file": "cypress\\e2e\\loginFunctionalityNegative.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bfe7b235-762e-4767-9b27-00978ac92670",
          "title": "Login Functinality with Negative scenarios",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid username",
              "fullTitle": "Login Functinality with Negative scenarios invalid username",
              "timedOut": null,
              "duration": 3852,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#username').type('testAbcd');\ncy.get('#password').type('SuperSecretPassword!');\ncy.get('button[type=\"submit\"]').click();\n// Assert error message for invalid username\ncy.get('#flash').should('be.visible').and('contain.text', 'Your username is invalid!');",
              "err": {},
              "uuid": "090eb1db-9793-40da-acb8-2ac08c2e38cc",
              "parentUUID": "bfe7b235-762e-4767-9b27-00978ac92670",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid password",
              "fullTitle": "Login Functinality with Negative scenarios invalid password",
              "timedOut": null,
              "duration": 3106,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#username').type('practice');\ncy.get('#password').type('cdeef!');\ncy.get('button[type=\"submit\"]').click();\n// Assert error message for invalid password\ncy.get('#flash').should('be.visible').and('contain.text', 'Your password is invalid!');",
              "err": {},
              "uuid": "3df55e14-1da4-47f5-ae2e-4071d1031376",
              "parentUUID": "bfe7b235-762e-4767-9b27-00978ac92670",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "090eb1db-9793-40da-acb8-2ac08c2e38cc",
            "3df55e14-1da4-47f5-ae2e-4071d1031376"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6958,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "9d5d524a-f399-4346-a0b0-e830a7544b33",
      "title": "",
      "fullFile": "cypress\\e2e\\loginFunctionalityPositive.cy.js",
      "file": "cypress\\e2e\\loginFunctionalityPositive.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "31974a1a-b88a-49dc-b5bf-33f6149aa0f8",
          "title": "Login Functionality Positive scenarios",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Login in to application with valid credentials",
              "fullTitle": "Login Functionality Positive scenarios Login in to application with valid credentials",
              "timedOut": null,
              "duration": 3347,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://practice.expandtesting.com/login');\ncy.get('#username').type('practice');\ncy.get('#password').type('SuperSecretPassword!');\ncy.get('button[type=\"submit\"]').click();\n//Assert URL\ncy.url().should('include', '/secure');\n//Assert Success Message\ncy.get('#flash').should('be.visible').and('contain.text', 'You logged into a secure area!');\n//Assert Logout Button\ncy.get('a.button.secondary.radius').should('be.visible').and('contain.text', 'Logout');",
              "err": {},
              "uuid": "42c897c8-585a-4d47-947e-6286807d3642",
              "parentUUID": "31974a1a-b88a-49dc-b5bf-33f6149aa0f8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "42c897c8-585a-4d47-947e-6286807d3642"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3347,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "45c1d430-f40b-427f-9ec6-4d95c0d8de79",
      "title": "",
      "fullFile": "cypress\\e2e\\loginandExtractToken.cy.js",
      "file": "cypress\\e2e\\loginandExtractToken.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f7d9bdd7-1611-484e-8ead-43eafe717d7d",
          "title": "User Login API and Extract Token",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "log in and extract the token",
              "fullTitle": "User Login API and Extract Token log in and extract the token",
              "timedOut": null,
              "duration": 506,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'https://practice.expandtesting.com/notes/api/users/login',\n  body: apidata,\n  failOnStatusCode: false\n}).then(res => {\n  cy.log(res);\n  // Step 3: Assert response status\n  expect(res.status).to.eq(200);\n  // Step 2: Extract and validate token\n  //expect(response.body).to.have.property('token');\n  cy.log(res.body.message);\n  expect(res.body.message).to.eq(\"Login successful\");\n  const token = res.body.data.token;\n  expect(res.body.data.token).to.not.be.null;\n  //cy.log(authToken)\n  // Save token to alias for reuse\n  cy.wrap(token).as('authToken');\n});",
              "err": {},
              "uuid": "c5f0532e-8ab7-4b5d-a871-050bdc3bff64",
              "parentUUID": "f7d9bdd7-1611-484e-8ead-43eafe717d7d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c5f0532e-8ab7-4b5d-a871-050bdc3bff64"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 506,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "ac78b2bd-2f86-401c-896d-36c9037cc683",
      "title": "",
      "fullFile": "cypress\\e2e\\loginandlogoutApplication.cy.js",
      "file": "cypress\\e2e\\loginandlogoutApplication.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "029a2276-41bd-4a77-8876-68a7032c8de4",
          "title": "loginApp",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "login to an application with valid credentials",
              "fullTitle": "loginApp login to an application with valid credentials",
              "timedOut": null,
              "duration": 3364,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"https://practice.expandtesting.com/login\");\n//cy.get('Username: ').contains('practice')\ncy.get('#username').type('practice');\ncy.get('#password').type('SuperSecretPassword!');\ncy.get('button[type=\"submit\"]').click();",
              "err": {},
              "uuid": "da7a863e-aef1-4fdd-8656-6fbafc30887a",
              "parentUUID": "029a2276-41bd-4a77-8876-68a7032c8de4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "logout to an application",
              "fullTitle": "loginApp logout to an application",
              "timedOut": null,
              "duration": 4571,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"https://practice.expandtesting.com/login\");\ncy.get('#username').type('practice');\ncy.get('#password').type('SuperSecretPassword!');\ncy.get('button[type=\"submit\"]').click();\ncy.get('i[class=\"icon-2x icon-signout\"]').click();",
              "err": {},
              "uuid": "598db4b6-d82a-418d-b3d2-252b00c79813",
              "parentUUID": "029a2276-41bd-4a77-8876-68a7032c8de4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "da7a863e-aef1-4fdd-8656-6fbafc30887a",
            "598db4b6-d82a-418d-b3d2-252b00c79813"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7935,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "06e970b0-dc06-43c1-b604-0f3850ba95ac",
      "title": "",
      "fullFile": "cypress\\e2e\\loginpagePOM.cy.js",
      "file": "cypress\\e2e\\loginpagePOM.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2e3a52e2-e5d4-487a-bcca-1bb91adae9f8",
          "title": "Login Page Testcase with POM",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "user should login and redirect to secure area",
              "fullTitle": "Login Page Testcase with POM user should login and redirect to secure area",
              "timedOut": null,
              "duration": 3472,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_loginpage.default.enterUsername('practice');\n_loginpage.default.enterPassword('SuperSecretPassword!');\n_loginpage.default.clickLogin();\ncy.url().should('include', '/secure');\ncy.contains('You logged into a secure area!').should('be.visible');",
              "err": {},
              "uuid": "fb19b9d7-8826-45af-94d9-59432cd83674",
              "parentUUID": "2e3a52e2-e5d4-487a-bcca-1bb91adae9f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid user login should show error message",
              "fullTitle": "Login Page Testcase with POM Invalid user login should show error message",
              "timedOut": null,
              "duration": 3342,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_loginpage.default.enterUsername('abdcdef');\n_loginpage.default.enterPassword('dfdfdfd');\n_loginpage.default.clickLogin();\ncy.contains('Your username is invalid!').should('be.visible');\ncy.url().should('include', '/login');",
              "err": {},
              "uuid": "445a673d-f13c-494b-85fe-4f378137a78b",
              "parentUUID": "2e3a52e2-e5d4-487a-bcca-1bb91adae9f8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fb19b9d7-8826-45af-94d9-59432cd83674",
            "445a673d-f13c-494b-85fe-4f378137a78b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6814,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "4f16c259-c9ab-4c14-a81e-0342dccc180c",
      "title": "",
      "fullFile": "cypress\\e2e\\loginwithCustomcommands.cy.js",
      "file": "cypress\\e2e\\loginwithCustomcommands.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6bde8ed2-d8d0-4d32-a55b-e302886d659c",
          "title": "Login Application",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Log in with valid credentials",
              "fullTitle": "Login Application Log in with valid credentials",
              "timedOut": null,
              "duration": 3595,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.login('practice', 'SuperSecretPassword!');\ncy.url().should('include', '/secure');",
              "err": {},
              "uuid": "f7ce44d1-00b1-4190-ab0c-6d37a7866d60",
              "parentUUID": "6bde8ed2-d8d0-4d32-a55b-e302886d659c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f7ce44d1-00b1-4190-ab0c-6d37a7866d60"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3595,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "f75df4b4-3946-45dd-a943-4a6206e311de",
      "title": "",
      "fullFile": "cypress\\e2e\\loginwithfixture_1a.cy.js",
      "file": "cypress\\e2e\\loginwithfixture_1a.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a0d7c22d-2ee2-4a3c-8f29-91947941a7e9",
          "title": "Login with fixture data",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Logs in using data from user.json",
              "fullTitle": "Login with fixture data Logs in using data from user.json",
              "timedOut": null,
              "duration": 3281,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://practice.expandtesting.com/login');\n// Use fixture data to fill in login form\ncy.get('#username').type(this.userData.username);\ncy.get('#password').type(this.userData.password);\ncy.get('button[type=\"submit\"]').click();\n// Assertion \ncy.url().should('include', '/secure');\ncy.get('#flash').should('be.visible').and('contain.text', 'You logged into a secure area!');",
              "err": {},
              "uuid": "87a0b58b-1f57-4a56-92b0-252671f75e64",
              "parentUUID": "a0d7c22d-2ee2-4a3c-8f29-91947941a7e9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87a0b58b-1f57-4a56-92b0-252671f75e64"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3281,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "8e77d04d-f5f2-4a13-b959-e33c12bcd43d",
      "title": "",
      "fullFile": "cypress\\e2e\\loginwithfixtureformdata_1b.cy.js",
      "file": "cypress\\e2e\\loginwithfixtureformdata_1b.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4352580d-6632-402f-95e1-8066edeea25e",
          "title": "Login using fixture data",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Login with form data from JSON file",
              "fullTitle": "Login using fixture data Login with form data from JSON file",
              "timedOut": null,
              "duration": 3241,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Load fixture\ncy.fixture('formData').then(data => {\n  cy.visit('https://practice.expandtesting.com/login');\n  // Fill in the form\n  cy.get('#username').type(data.username);\n  cy.get('#password').type(data.password);\n  cy.get('button[type=\"submit\"]').click();\n  // Validate login success\n  cy.url().should('include', '/secure');\n  cy.get('#flash').should('be.visible').and('contain.text', 'You logged into a secure area!');\n});",
              "err": {},
              "uuid": "41fdc791-2757-41cc-b021-75fb12d515c9",
              "parentUUID": "4352580d-6632-402f-95e1-8066edeea25e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "41fdc791-2757-41cc-b021-75fb12d515c9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3241,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "03b02a46-c40e-426b-b76b-40629b5fe3fc",
      "title": "",
      "fullFile": "cypress\\e2e\\radiobutton_2c.cy.js",
      "file": "cypress\\e2e\\radiobutton_2c.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "18a02eff-9017-41a2-8b05-0cc64ceb5f78",
          "title": "Select Blue radio button",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Select the Blue radio button",
              "fullTitle": "Select Blue radio button Select the Blue radio button",
              "timedOut": null,
              "duration": 1222,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://practice.expandtesting.com/radio-buttons');\n//blue radio button\ncy.get('input#blue').check().should('be.checked');",
              "err": {},
              "uuid": "00ffafb5-aea4-4be6-a589-8f310ec811d1",
              "parentUUID": "18a02eff-9017-41a2-8b05-0cc64ceb5f78",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "00ffafb5-aea4-4be6-a589-8f310ec811d1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1222,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "0689f5f7-d7f5-4055-ac06-412a265ab544",
      "title": "",
      "fullFile": "cypress\\e2e\\registernewuser.cy.js",
      "file": "cypress\\e2e\\registernewuser.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "302fd3f2-fc6d-40de-9ea6-d4571c496bef",
          "title": "Register New User using API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "create a new user",
              "fullTitle": "Register New User using API create a new user",
              "timedOut": null,
              "duration": 545,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const timestamp = Date.now();\nconst user = {\n  name: 'QAtest',\n  email: `user${timestamp}@abc.com`,\n  password: 'QAPassword'\n};\ncy.request({\n  method: 'POST',\n  url: 'https://practice.expandtesting.com/notes/api/users/register',\n  body: user\n  //failOnStatusCode: false // allows manual status check\n}).then(res => {\n  // Step 2: Assert response status\n  expect(res.status).to.eq(201);\n  // Step 3: Validate success message\n  expect(res.body).to.have.property('message', 'User account created successfully');\n});",
              "err": {},
              "uuid": "fc893c8c-1314-4bf2-90c9-9d804e3fc278",
              "parentUUID": "302fd3f2-fc6d-40de-9ea6-d4571c496bef",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fc893c8c-1314-4bf2-90c9-9d804e3fc278"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 545,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "ed63cfdf-443e-4f46-a014-31cd6e03f1c2",
      "title": "",
      "fullFile": "cypress\\e2e\\registernewuserAPI.cy.js",
      "file": "cypress\\e2e\\registernewuserAPI.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7a96e232-bf25-4884-9a29-458f8a906850",
          "title": "Register New User using API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "create a new user",
              "fullTitle": "Register New User using API create a new user",
              "timedOut": null,
              "duration": 510,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"\\\\registernewuserAPI.cy.js\\\\Register New User using API -- create a new user (failed).png\"\n    ]\n  ]\n}",
              "code": "//const timestamp = Date.now()\nconst apidata = {\n  name: \"QAtester4\",\n  email: \"sssf4@abcd.com\",\n  password: \"QAPassword4\"\n};\ncy.request({\n  method: 'POST',\n  url: 'https://practice.expandtesting.com/notes/api/users/register',\n  body: apidata\n  //failOnStatusCode: false // allows manual status check\n}).then(res => {\n  cy.log(res);\n  // Step 2: Assert response status\n  expect(res.status).to.eq(201);\n  // Step 3: Validate success message\n  expect(res.body.message).to.eq('User account created successfully');\n});",
              "err": {
                "message": "CypressError: `cy.request()` failed on:\n\nhttps://practice.expandtesting.com/notes/api/users/register\n\nThe response we received from your web server was:\n\n  > 409: Conflict\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: POST\nURL: https://practice.expandtesting.com/notes/api/users/register\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/14.5.0 Chrome/130.0.6723.137 Electron/33.2.1 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"content-type\": \"application/json\",\n  \"content-length\": 70\n}\nBody: {\"name\":\"QAtester4\",\"email\":\"sssf4@abcd.com\",\"password\":\"QAPassword4\"}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 409 - Conflict\nHeaders: {\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-credentials\": \"true\",\n  \"access-control-allow-methods\": \"GET, POST, PUT, DELETE, PATCH\",\n  \"access-control-allow-headers\": \"Origin, X-Requested-With, Authorization, Content-Type, Accept, X-Auth-Token\",\n  \"content-type\": \"application/json; charset=utf-8\",\n  \"content-encoding\": \"gzip\",\n  \"etag\": \"W/\\\"60-1FDx49viOvdCVw+AmA0rzVYpPoA\\\"\",\n  \"set-cookie\": [\n    \"express:sess=eyJmbGFzaCI6e319; path=/; httponly\",\n    \"express:sess.sig=tdt42nQZiQvICqmrvHQ1_16fHk0; path=/; httponly\"\n  ],\n  \"date\": \"Tue, 12 Aug 2025 06:53:52 GMT\",\n  \"connection\": \"keep-alive\",\n  \"keep-alive\": \"timeout=5\",\n  \"transfer-encoding\": \"chunked\"\n}\nBody: {\n  \"success\": false,\n  \"status\": 409,\n  \"message\": \"An account already exists with the same email address\"\n}\n\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` failed on:\n\nhttps://practice.expandtesting.com/notes/api/users/register\n\nThe response we received from your web server was:\n\n  > 409: Conflict\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: POST\nURL: https://practice.expandtesting.com/notes/api/users/register\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/14.5.0 Chrome/130.0.6723.137 Electron/33.2.1 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"content-type\": \"application/json\",\n  \"content-length\": 70\n}\nBody: {\"name\":\"QAtester4\",\"email\":\"sssf4@abcd.com\",\"password\":\"QAPassword4\"}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 409 - Conflict\nHeaders: {\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-credentials\": \"true\",\n  \"access-control-allow-methods\": \"GET, POST, PUT, DELETE, PATCH\",\n  \"access-control-allow-headers\": \"Origin, X-Requested-With, Authorization, Content-Type, Accept, X-Auth-Token\",\n  \"content-type\": \"application/json; charset=utf-8\",\n  \"content-encoding\": \"gzip\",\n  \"etag\": \"W/\\\"60-1FDx49viOvdCVw+AmA0rzVYpPoA\\\"\",\n  \"set-cookie\": [\n    \"express:sess=eyJmbGFzaCI6e319; path=/; httponly\",\n    \"express:sess.sig=tdt42nQZiQvICqmrvHQ1_16fHk0; path=/; httponly\"\n  ],\n  \"date\": \"Tue, 12 Aug 2025 06:53:52 GMT\",\n  \"connection\": \"keep-alive\",\n  \"keep-alive\": \"timeout=5\",\n  \"transfer-encoding\": \"chunked\"\n}\nBody: {\n  \"success\": false,\n  \"status\": 409,\n  \"message\": \"An account already exists with the same email address\"\n}\n\n\nhttps://on.cypress.io/request\n    at <unknown> (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:136322:72)\n    at tryCatcher (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise._settlePromiseFromHandler (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:1489:31)\n    at Promise._settlePromise (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:1546:18)\n    at Promise._settlePromise0 (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:1591:10)\n    at Promise._settlePromises (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:1671:18)\n    at _drainQueueStep (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:2377:12)\n    at _drainQueue (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:2370:9)\n    at Async._drainQueues (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:2386:5)\n    at Async.drainQueues (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:2256:14)\nFrom Your Spec Code:\n    at Context.eval (webpack://cypress/./cypress/e2e/registernewuserAPI.cy.js:10:7)",
                "diff": null
              },
              "uuid": "1a6b3cbc-1e48-492e-bd40-8395ee5d541f",
              "parentUUID": "7a96e232-bf25-4884-9a29-458f8a906850",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1a6b3cbc-1e48-492e-bd40-8395ee5d541f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 510,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "7b4e18c0-d306-4b8b-9ff3-12134dc487c7",
      "title": "",
      "fullFile": "cypress\\e2e\\registrationForm.cy.js",
      "file": "cypress\\e2e\\registrationForm.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3fd607e6-5d78-4a3d-bebf-b88f50ea9180",
          "title": "Registration Form Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": " Registration Page",
              "fullTitle": "Registration Form Tests  Registration Page",
              "timedOut": null,
              "duration": 7586,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"\\\\registrationForm.cy.js\\\\Registration Form Tests --  Registration Page (failed).png\"\n    ]\n  ]\n}",
              "code": "cy.get('#username').type('testqa');\ncy.get('#password').type('test123');\ncy.get('input#confirmPassword', {\n  timeout: 10000\n}).should('be.visible').type('test123');\n//cy.get('#confirmPassword').type('test123')\ncy.get('button[type=submit]').click();\n// Redirect to login and show success message\ncy.url().should('include', '/login');\ncy.get('#flash').should('be.visible').and('contain.text', 'Successfully registered, you can log in now.');",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected 'https://practice.expandtesting.com/register' to include '/login'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected 'https://practice.expandtesting.com/register' to include '/login'\n    at Context.eval (webpack://cypress/./cypress/e2e/registrationForm.cy.js:18:13)",
                "diff": null
              },
              "uuid": "de39686c-b872-4067-b2c2-9a5b5857671e",
              "parentUUID": "3fd607e6-5d78-4a3d-bebf-b88f50ea9180",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "username validation",
              "fullTitle": "Registration Form Tests username validation",
              "timedOut": null,
              "duration": 3371,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#password').type('ValidPass');\ncy.get('#confirmPassword').type('ValidPass');\ncy.get('button[type=submit]').click();\ncy.get('#flash').should('be.visible').and('contain.text', 'All fields are required.');",
              "err": {},
              "uuid": "82a1361e-9a98-4eec-9ed3-3702d4b35675",
              "parentUUID": "3fd607e6-5d78-4a3d-bebf-b88f50ea9180",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Missing Password validation",
              "fullTitle": "Registration Form Tests Missing Password validation",
              "timedOut": null,
              "duration": 3132,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#username').type('test');\ncy.get('#confirmPassword').type('test123');\ncy.get('button[type=submit]').click();\ncy.get('#flash').should('be.visible').and('contain.text', 'All fields are required.');",
              "err": {},
              "uuid": "a9bc335a-d14f-4d0d-9269-67061408c2bc",
              "parentUUID": "3fd607e6-5d78-4a3d-bebf-b88f50ea9180",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Non-matching passwords",
              "fullTitle": "Registration Form Tests Non-matching passwords",
              "timedOut": null,
              "duration": 3460,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#username').type('test');\ncy.get('#password').type('test123');\ncy.get('#confirmPassword').type('Mismatch123!');\ncy.get('button[type=submit]').click();\ncy.get('#flash').should('be.visible').and('contain.text', 'Passwords do not match.');",
              "err": {},
              "uuid": "4665503b-b817-401f-b39c-35693035b671",
              "parentUUID": "3fd607e6-5d78-4a3d-bebf-b88f50ea9180",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "82a1361e-9a98-4eec-9ed3-3702d4b35675",
            "a9bc335a-d14f-4d0d-9269-67061408c2bc",
            "4665503b-b817-401f-b39c-35693035b671"
          ],
          "failures": [
            "de39686c-b872-4067-b2c2-9a5b5857671e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 17549,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "4fd43a43-1820-4805-99c8-8b01c0c79e73",
      "title": "",
      "fullFile": "cypress\\e2e\\sampleTest.cy.js",
      "file": "cypress\\e2e\\sampleTest.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "63f6b964-3cb3-4ae6-8478-12c63ffd2853",
          "title": "My First Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Visits a webpage and checks title",
              "fullTitle": "My First Test Visits a webpage and checks title",
              "timedOut": null,
              "duration": 317,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://example.com');\ncy.get('h1').contains('Example Domain');",
              "err": {},
              "uuid": "20b8285a-3676-40e0-9a54-17604e233273",
              "parentUUID": "63f6b964-3cb3-4ae6-8478-12c63ffd2853",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "20b8285a-3676-40e0-9a54-17604e233273"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 317,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "ba355aa5-8a57-442c-9754-74254f5b7da2",
      "title": "",
      "fullFile": "cypress\\e2e\\scrolldragdrop_3.cy.js",
      "file": "cypress\\e2e\\scrolldragdrop_3.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "scroll in an element",
          "fullTitle": "scroll in an element",
          "timedOut": null,
          "duration": 1938,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cy.visit(\"https://practice.expandtesting.com/scrollbars\");\n//scroll in to an element\n//cy.get(\"[id='search-input']\").type(\"scrollbars\")  \ncy.get('[style=\"height:150px;overflow-y: scroll;width:300px;overflow-x:scroll\"]').click();\ncy.get('#hidingButton').scrollIntoView().click();",
          "err": {},
          "uuid": "3621ed1f-4ac7-433f-a82f-6d5ddcf24172",
          "parentUUID": "ba355aa5-8a57-442c-9754-74254f5b7da2",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Drag and drop",
          "fullTitle": "Drag and drop",
          "timedOut": null,
          "duration": 1392,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cy.visit(\"https://practice.expandtesting.com/drag-and-drop\");\n// Drag Box A and drop it on Box B\ncy.get('#column-a').drag('#column-b');\n// Optional: assert that they’ve swapped\ncy.get('#column-a header').should('have.text', 'B');\ncy.get('#column-b header').should('have.text', 'A');",
          "err": {},
          "uuid": "80a53564-6651-4475-af2e-8e749713bb3f",
          "parentUUID": "ba355aa5-8a57-442c-9754-74254f5b7da2",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [],
      "passes": [
        "3621ed1f-4ac7-433f-a82f-6d5ddcf24172",
        "80a53564-6651-4475-af2e-8e749713bb3f"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 3330,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    },
    {
      "uuid": "15e5fbca-7742-4589-844c-317f420d71cc",
      "title": "",
      "fullFile": "cypress\\e2e\\securePageTestPom.cy.js",
      "file": "cypress\\e2e\\securePageTestPom.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "An uncaught error was detected outside of a test",
          "fullTitle": "An uncaught error was detected outside of a test",
          "timedOut": null,
          "duration": 181,
          "state": "failed",
          "speed": null,
          "pass": false,
          "fail": true,
          "pending": false,
          "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"\\\\securePageTestPom.cy.js\\\\An uncaught error was detected outside of a test (failed).png\"\n    ]\n  ]\n}",
          "code": "throw err;",
          "err": {
            "message": "TypeError: The following error originated from your test code, not from Cypress.\n\n  > _loginpage.default is not a constructor\n\nWhen Cypress detects uncaught errors originating from your test code it will automatically fail the current test.\n\nCypress could not associate this error to any specific test.\n\nWe dynamically generated a new test to display this failure.",
            "estack": "TypeError: The following error originated from your test code, not from Cypress.\n\n  > _loginpage.default is not a constructor\n\nWhen Cypress detects uncaught errors originating from your test code it will automatically fail the current test.\n\nCypress could not associate this error to any specific test.\n\nWe dynamically generated a new test to display this failure.\n    at eval (webpack://cypress/./cypress/e2e/securePageTestPom.cy.js:4:18)\n    at eval (https://practice.expandtesting.com/__cypress/tests?p=cypress\\e2e\\securePageTestPom.cy.js:143:3)\n    at eval (https://practice.expandtesting.com/__cypress/tests?p=cypress\\e2e\\securePageTestPom.cy.js:145:12)\n    at eval (<anonymous>)\n    at <unknown> (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:113267:23)\n    at tryCatcher (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:1777:23)\n    at Object.gotValue (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:6446:18)\n    at Object.gotAccum (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:6435:25)\n    at Object.tryCatcher (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise._settlePromiseFromHandler (https://practice.expandtesting.com/__cypress/runner/cypress_runner.js:1489:31)",
            "diff": null
          },
          "uuid": "7ca46bf9-44ed-417e-99dc-656761551e40",
          "parentUUID": "15e5fbca-7742-4589-844c-317f420d71cc",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [],
      "passes": [],
      "failures": [
        "7ca46bf9-44ed-417e-99dc-656761551e40"
      ],
      "pending": [],
      "skipped": [],
      "duration": 181,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    },
    {
      "uuid": "1eede1a5-4823-4f63-b499-4f3017fb9e78",
      "title": "",
      "fullFile": "cypress\\e2e\\usePrevSubject.cy.js",
      "file": "cypress\\e2e\\usePrevSubject.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a4243da9-2d39-4e8f-a043-5683bc632f68",
          "title": "usePrevSubject",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Login using Fillinput",
              "fullTitle": "usePrevSubject Login using Fillinput",
              "timedOut": null,
              "duration": 3385,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Use previous subject\ncy.get('#username').fillinput('practice');\ncy.get('#password').fillinput('SuperSecretPassword!');\ncy.get('#login > .btn').click();\ncy.get('b').should('have.text', 'You logged into a secure area!');",
              "err": {},
              "uuid": "8ea93d68-3448-468f-a1b0-e8c2fce52fec",
              "parentUUID": "a4243da9-2d39-4e8f-a043-5683bc632f68",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8ea93d68-3448-468f-a1b0-e8c2fce52fec"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3385,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d1930835-c098-46e5-be3f-f36611c92416",
      "title": "",
      "fullFile": "cypress\\e2e\\validatedynamiccontentTable_5.cy.js",
      "file": "cypress\\e2e\\validatedynamiccontentTable_5.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "efbda29b-52cd-477e-9b8f-644545461f69",
          "title": "Validate Chrome CPU usage matches the label",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Locate Chrome Row and Compare its CPU value in the table with the yellow label ",
              "fullTitle": "Validate Chrome CPU usage matches the label Locate Chrome Row and Compare its CPU value in the table with the yellow label ",
              "timedOut": null,
              "duration": 1157,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://practice.expandtesting.com/dynamic-table');\n// Wait until Chrome row appears\ncy.get(\"table.table-striped tbody tr\").each($tr => {\n  const $td = $tr.find('td');\n  const browserName = $td.eq(0).text().trim();\n  if (browserName == 'Chrome') {\n    var _find;\n    const cpuUsageFromTable = (_find = [...$td].find(td => td.innerText.includes('%'))) === null || _find === void 0 ? void 0 : _find.innerText.trim();\n    cy.get('#chrome-cpu').invoke('text').then(fullText => {\n      const match = fullText.match(/(\\d+(\\.\\d+)?%)/);\n      const cpuUsageFromCard = match ? match[0] : null;\n      expect(cpuUsageFromCard).to.eq(cpuUsageFromTable);\n    });\n  }\n});",
              "err": {},
              "uuid": "e050abea-2a9a-4af7-9c3d-32d985830ddd",
              "parentUUID": "efbda29b-52cd-477e-9b8f-644545461f69",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e050abea-2a9a-4af7-9c3d-32d985830ddd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1157,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "b53b6904-c01b-40c9-bd70-bcacd92b53ed",
      "title": "",
      "fullFile": "cypress\\e2e\\validateeachbrowsernameandcpu_4.cy.js",
      "file": "cypress\\e2e\\validateeachbrowsernameandcpu_4.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4d4e950d-8bd8-4056-a2c4-82aebd04e635",
          "title": "Log Each Browsername and its cpu usage",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "use .each() to log each browser name and its CPU usage.",
              "fullTitle": "Log Each Browsername and its cpu usage use .each() to log each browser name and its CPU usage.",
              "timedOut": null,
              "duration": 1191,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://practice.expandtesting.com/dynamic-table');\ncy.get(\"table[class='table table-striped'] tbody tr \").each(($tr, i) => {\n  var _find;\n  const $td = $tr.find('td');\n  const browsername = $td.eq(0).text();\n  const cpuUsage = (_find = [...$td].find(td => td.innerText.includes('%'))) === null || _find === void 0 ? void 0 : _find.innerText;\n  cy.log('Browser Name is ', browsername, 'cpu usage', cpuUsage);\n});",
              "err": {},
              "uuid": "10569462-2f3e-4ac9-a125-b125ce4f6249",
              "parentUUID": "4d4e950d-8bd8-4056-a2c4-82aebd04e635",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Count how many browsers have CPU usage over 20%.",
              "fullTitle": "Log Each Browsername and its cpu usage Count how many browsers have CPU usage over 20%.",
              "timedOut": null,
              "duration": 1031,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 0;\ncy.visit('https://practice.expandtesting.com/dynamic-table');\ncy.get(\"table[class='table table-striped'] tbody tr \").each(($tr, i) => {\n  var _find2;\n  const $td = $tr.find('td');\n  const browsername = $td.eq(0).text();\n  const cpuUsageText = (_find2 = [...$td].find(td => td.innerText.includes('%'))) === null || _find2 === void 0 ? void 0 : _find2.innerText;\n  if (cpuUsageText) {\n    const cpuValue = parseFloat(cpuUsageText.replace('%', ''));\n    if (cpuValue > 20) {\n      count++;\n    }\n  }\n}).then(() => {\n  cy.log('Total browser count with>20 % is', count);\n});",
              "err": {},
              "uuid": "40b71fc1-e090-422b-9874-bc0ff18efb21",
              "parentUUID": "4d4e950d-8bd8-4056-a2c4-82aebd04e635",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "10569462-2f3e-4ac9-a125-b125ce4f6249",
            "40b71fc1-e090-422b-9874-bc0ff18efb21"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2222,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "6de367a1-bcc9-4f7e-8234-22bb3550a8fc",
      "title": "",
      "fullFile": "cypress\\e2e\\1-getting-started\\todo.cy.js",
      "file": "cypress\\e2e\\1-getting-started\\todo.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b2dd91ee-acdc-4e25-b488-32c9fbecfbc1",
          "title": "example to-do app",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "displays two todo items by default",
              "fullTitle": "example to-do app displays two todo items by default",
              "timedOut": null,
              "duration": 819,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We use the `cy.get()` command to get all elements that match the selector.\n// Then, we use `should` to assert that there are two matched items,\n// which are the two default items.\ncy.get('.todo-list li').should('have.length', 2);\n// We can go even further and check that the default todos each contain\n// the correct text. We use the `first` and `last` functions\n// to get just the first and last matched elements individually,\n// and then perform an assertion with `should`.\ncy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\ncy.get('.todo-list li').last().should('have.text', 'Walk the dog');",
              "err": {},
              "uuid": "fc6454d5-9e96-4a18-8772-ce080f42daf4",
              "parentUUID": "b2dd91ee-acdc-4e25-b488-32c9fbecfbc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add new todo items",
              "fullTitle": "example to-do app can add new todo items",
              "timedOut": null,
              "duration": 427,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We'll store our item text in a variable so we can reuse it\nconst newItem = 'Feed the cat';\n// Let's get the input element and use the `type` command to\n// input our new list item. After typing the content of our item,\n// we need to type the enter key as well in order to submit the input.\n// This input has a data-test attribute so we'll use that to select the\n// element in accordance with best practices:\n// https://on.cypress.io/selecting-elements\ncy.get('[data-test=new-todo]').type(`${newItem}{enter}`);\n// Now that we've typed our new item, let's check that it actually was added to the list.\n// Since it's the newest item, it should exist as the last element in the list.\n// In addition, with the two default items, we should have a total of 3 elements in the list.\n// Since assertions yield the element that was asserted on,\n// we can chain both of these assertions together into a single statement.\ncy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);",
              "err": {},
              "uuid": "4cdf3e27-f6f5-4cac-9c15-13c034217cb7",
              "parentUUID": "b2dd91ee-acdc-4e25-b488-32c9fbecfbc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can check off an item as completed",
              "fullTitle": "example to-do app can check off an item as completed",
              "timedOut": null,
              "duration": 202,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// In addition to using the `get` command to get an element by selector,\n// we can also use the `contains` command to get an element by its contents.\n// However, this will yield the <label>, which is lowest-level element that contains the text.\n// In order to check the item, we'll find the <input> element for this <label>\n// by traversing up the dom to the parent element. From there, we can `find`\n// the child checkbox <input> element and use the `check` command to check it.\ncy.contains('Pay electric bill').parent().find('input[type=checkbox]').check();\n// Now that we've checked the button, we can go ahead and make sure\n// that the list element is now marked as completed.\n// Again we'll use `contains` to find the <label> element and then use the `parents` command\n// to traverse multiple levels up the dom until we find the corresponding <li> element.\n// Once we get that element, we can assert that it has the completed class.\ncy.contains('Pay electric bill').parents('li').should('have.class', 'completed');",
              "err": {},
              "uuid": "21374d4f-f6ee-48d1-96a2-ba6f52a37bf2",
              "parentUUID": "b2dd91ee-acdc-4e25-b488-32c9fbecfbc1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "f0574055-887a-4c4d-b7ea-6e762c9daa10",
              "title": "with a checked task",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can filter for uncompleted tasks",
                  "fullTitle": "example to-do app with a checked task can filter for uncompleted tasks",
                  "timedOut": null,
                  "duration": 329,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We'll click on the \"active\" button in order to\n// display only incomplete items\ncy.contains('Active').click();\n// After filtering, we can assert that there is only the one\n// incomplete item in the list.\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog');\n// For good measure, let's also assert that the task we checked off\n// does not exist on the page.\ncy.contains('Pay electric bill').should('not.exist');",
                  "err": {},
                  "uuid": "7ac7f057-fc2d-4660-871c-9298b9523e40",
                  "parentUUID": "f0574055-887a-4c4d-b7ea-6e762c9daa10",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can filter for completed tasks",
                  "fullTitle": "example to-do app with a checked task can filter for completed tasks",
                  "timedOut": null,
                  "duration": 282,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can perform similar steps as the test above to ensure\n// that only completed tasks are shown\ncy.contains('Completed').click();\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\ncy.contains('Walk the dog').should('not.exist');",
                  "err": {},
                  "uuid": "105a9290-d4c2-4c56-94cc-c71eddc5528c",
                  "parentUUID": "f0574055-887a-4c4d-b7ea-6e762c9daa10",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can delete all completed tasks",
                  "fullTitle": "example to-do app with a checked task can delete all completed tasks",
                  "timedOut": null,
                  "duration": 299,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First, let's click the \"Clear completed\" button\n// `contains` is actually serving two purposes here.\n// First, it's ensuring that the button exists within the dom.\n// This button only appears when at least one task is checked\n// so this command is implicitly verifying that it does exist.\n// Second, it selects the button so we can click it.\ncy.contains('Clear completed').click();\n// Then we can make sure that there is only one element\n// in the list and our element does not exist\ncy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill');\n// Finally, make sure that the clear button no longer exists.\ncy.contains('Clear completed').should('not.exist');",
                  "err": {},
                  "uuid": "66111e94-335b-4bd5-a4f5-b4c6a995065d",
                  "parentUUID": "f0574055-887a-4c4d-b7ea-6e762c9daa10",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7ac7f057-fc2d-4660-871c-9298b9523e40",
                "105a9290-d4c2-4c56-94cc-c71eddc5528c",
                "66111e94-335b-4bd5-a4f5-b4c6a995065d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 910,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "fc6454d5-9e96-4a18-8772-ce080f42daf4",
            "4cdf3e27-f6f5-4cac-9c15-13c034217cb7",
            "21374d4f-f6ee-48d1-96a2-ba6f52a37bf2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1448,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "2415ea54-7492-46ac-83eb-178b2c8e27e3",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\actions.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\actions.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c9f1cd20-718b-44c8-8353-05d2c133369b",
          "title": "Actions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".type() - type into a DOM element",
              "fullTitle": "Actions .type() - type into a DOM element",
              "timedOut": null,
              "duration": 3926,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/type\ncy.get('.action-email').type('fake@email.com');\ncy.get('.action-email').should('have.value', 'fake@email.com');\n// .type() with special character sequences\ncy.get('.action-email').type('{leftarrow}{rightarrow}{uparrow}{downarrow}');\ncy.get('.action-email').type('{del}{selectall}{backspace}');\n// .type() with key modifiers\ncy.get('.action-email').type('{alt}{option}'); // these are equivalent\ncy.get('.action-email').type('{ctrl}{control}'); // these are equivalent\ncy.get('.action-email').type('{meta}{command}{cmd}'); // these are equivalent\ncy.get('.action-email').type('{shift}');\n// Delay each keypress by 0.1 sec\ncy.get('.action-email').type('slow.typing@email.com', {\n  delay: 100\n});\ncy.get('.action-email').should('have.value', 'slow.typing@email.com');\ncy.get('.action-disabled')\n// Ignore error checking prior to type\n// like whether the input is visible or disabled\n.type('disabled error checking', {\n  force: true\n});\ncy.get('.action-disabled').should('have.value', 'disabled error checking');",
              "err": {},
              "uuid": "8162c56b-8fa9-4878-896f-b86930abc0e2",
              "parentUUID": "c9f1cd20-718b-44c8-8353-05d2c133369b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".focus() - focus on a DOM element",
              "fullTitle": "Actions .focus() - focus on a DOM element",
              "timedOut": null,
              "duration": 166,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/focus\ncy.get('.action-focus').focus();\ncy.get('.action-focus').should('have.class', 'focus').prev().should('have.attr', 'style', 'color: orange;');",
              "err": {},
              "uuid": "22932c75-021d-4d0a-a76e-435e057cccc0",
              "parentUUID": "c9f1cd20-718b-44c8-8353-05d2c133369b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".blur() - blur off a DOM element",
              "fullTitle": "Actions .blur() - blur off a DOM element",
              "timedOut": null,
              "duration": 438,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/blur\ncy.get('.action-blur').type('About to blur');\ncy.get('.action-blur').blur();\ncy.get('.action-blur').should('have.class', 'error').prev().should('have.attr', 'style', 'color: red;');",
              "err": {},
              "uuid": "0b115588-f96c-4b42-8f9b-bfdb99a0cef7",
              "parentUUID": "c9f1cd20-718b-44c8-8353-05d2c133369b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".clear() - clears an input or textarea element",
              "fullTitle": "Actions .clear() - clears an input or textarea element",
              "timedOut": null,
              "duration": 654,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clear\ncy.get('.action-clear').type('Clear this text');\ncy.get('.action-clear').should('have.value', 'Clear this text');\ncy.get('.action-clear').clear();\ncy.get('.action-clear').should('have.value', '');",
              "err": {},
              "uuid": "e52943a0-010f-47b9-b91d-7686d9b21e03",
              "parentUUID": "c9f1cd20-718b-44c8-8353-05d2c133369b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".submit() - submit a form",
              "fullTitle": "Actions .submit() - submit a form",
              "timedOut": null,
              "duration": 608,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/submit\ncy.get('.action-form').find('[type=\"text\"]').type('HALFOFF');\ncy.get('.action-form').submit();\ncy.get('.action-form').next().should('contain', 'Your form has been submitted!');",
              "err": {},
              "uuid": "c92a555d-c15b-4665-b9a2-38c3a7591bd6",
              "parentUUID": "c9f1cd20-718b-44c8-8353-05d2c133369b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".click() - click on a DOM element",
              "fullTitle": "Actions .click() - click on a DOM element",
              "timedOut": null,
              "duration": 2338,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/click\ncy.get('.action-btn').click();\n// You can click on 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// clicking in the center of the element is the default\ncy.get('#action-canvas').click();\ncy.get('#action-canvas').click('topLeft');\ncy.get('#action-canvas').click('top');\ncy.get('#action-canvas').click('topRight');\ncy.get('#action-canvas').click('left');\ncy.get('#action-canvas').click('right');\ncy.get('#action-canvas').click('bottomLeft');\ncy.get('#action-canvas').click('bottom');\ncy.get('#action-canvas').click('bottomRight');\n// .click() accepts an x and y coordinate\n// that controls where the click occurs :)\ncy.get('#action-canvas');\ncy.get('#action-canvas').click(80, 75); // click 80px on x coord and 75px on y coord\ncy.get('#action-canvas').click(170, 75);\ncy.get('#action-canvas').click(80, 165);\ncy.get('#action-canvas').click(100, 185);\ncy.get('#action-canvas').click(125, 190);\ncy.get('#action-canvas').click(150, 185);\ncy.get('#action-canvas').click(170, 165);\n// click multiple elements by passing multiple: true\ncy.get('.action-labels>.label').click({\n  multiple: true\n});\n// Ignore error checking prior to clicking\ncy.get('.action-opacity>.btn').click({\n  force: true\n});",
              "err": {},
              "uuid": "1b1b472a-68d2-4398-b3db-a90cea2cf662",
              "parentUUID": "c9f1cd20-718b-44c8-8353-05d2c133369b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".dblclick() - double click on a DOM element",
              "fullTitle": "Actions .dblclick() - double click on a DOM element",
              "timedOut": null,
              "duration": 293,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/dblclick\n// Our app has a listener on 'dblclick' event in our 'scripts.js'\n// that hides the div and shows an input on double click\ncy.get('.action-div').dblclick();\ncy.get('.action-div').should('not.be.visible');\ncy.get('.action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "15006ed3-ebec-4eab-a9d6-621074013d90",
              "parentUUID": "c9f1cd20-718b-44c8-8353-05d2c133369b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".rightclick() - right click on a DOM element",
              "fullTitle": "Actions .rightclick() - right click on a DOM element",
              "timedOut": null,
              "duration": 306,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/rightclick\n// Our app has a listener on 'contextmenu' event in our 'scripts.js'\n// that hides the div and shows an input on right click\ncy.get('.rightclick-action-div').rightclick();\ncy.get('.rightclick-action-div').should('not.be.visible');\ncy.get('.rightclick-action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "08b6b7a3-936f-4c54-b82c-b8a65b428e1e",
              "parentUUID": "c9f1cd20-718b-44c8-8353-05d2c133369b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".check() - check a checkbox or radio element",
              "fullTitle": "Actions .check() - check a checkbox or radio element",
              "timedOut": null,
              "duration": 1090,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/check\n// By default, .check() will check all\n// matching checkbox or radio elements in succession, one after another\ncy.get('.action-checkboxes [type=\"checkbox\"]').not('[disabled]').check();\ncy.get('.action-checkboxes [type=\"checkbox\"]').not('[disabled]').should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').not('[disabled]').check();\ncy.get('.action-radios [type=\"radio\"]').not('[disabled]').should('be.checked');\n// .check() accepts a value argument\ncy.get('.action-radios [type=\"radio\"]').check('radio1');\ncy.get('.action-radios [type=\"radio\"]').should('be.checked');\n// .check() accepts an array of values\ncy.get('.action-multiple-checkboxes [type=\"checkbox\"]').check(['checkbox1', 'checkbox2']);\ncy.get('.action-multiple-checkboxes [type=\"checkbox\"]').should('be.checked');\n// Ignore error checking prior to checking\ncy.get('.action-checkboxes [disabled]').check({\n  force: true\n});\ncy.get('.action-checkboxes [disabled]').should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').check('radio3', {\n  force: true\n});\ncy.get('.action-radios [type=\"radio\"]').should('be.checked');",
              "err": {},
              "uuid": "a62cccb7-b6ec-4df3-9030-91800c2f8142",
              "parentUUID": "c9f1cd20-718b-44c8-8353-05d2c133369b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".uncheck() - uncheck a checkbox element",
              "fullTitle": "Actions .uncheck() - uncheck a checkbox element",
              "timedOut": null,
              "duration": 1001,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/uncheck\n// By default, .uncheck() will uncheck all matching\n// checkbox elements in succession, one after another\ncy.get('.action-check [type=\"checkbox\"]').not('[disabled]').uncheck();\ncy.get('.action-check [type=\"checkbox\"]').not('[disabled]').should('not.be.checked');\n// .uncheck() accepts a value argument\ncy.get('.action-check [type=\"checkbox\"]').check('checkbox1');\ncy.get('.action-check [type=\"checkbox\"]').uncheck('checkbox1');\ncy.get('.action-check [type=\"checkbox\"][value=\"checkbox1\"]').should('not.be.checked');\n// .uncheck() accepts an array of values\ncy.get('.action-check [type=\"checkbox\"]').check(['checkbox1', 'checkbox3']);\ncy.get('.action-check [type=\"checkbox\"]').uncheck(['checkbox1', 'checkbox3']);\ncy.get('.action-check [type=\"checkbox\"][value=\"checkbox1\"]').should('not.be.checked');\ncy.get('.action-check [type=\"checkbox\"][value=\"checkbox3\"]').should('not.be.checked');\n// Ignore error checking prior to unchecking\ncy.get('.action-check [disabled]').uncheck({\n  force: true\n});\ncy.get('.action-check [disabled]').should('not.be.checked');",
              "err": {},
              "uuid": "b11a8214-27a1-4f73-bfc7-228b34b84112",
              "parentUUID": "c9f1cd20-718b-44c8-8353-05d2c133369b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".select() - select an option in a <select> element",
              "fullTitle": "Actions .select() - select an option in a <select> element",
              "timedOut": null,
              "duration": 1024,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/select\n// at first, no option should be selected\ncy.get('.action-select').should('have.value', '--Select a fruit--');\n// Select option(s) with matching text content\ncy.get('.action-select').select('apples');\n// confirm the apples were selected\n// note that each value starts with \"fr-\" in our HTML\ncy.get('.action-select').should('have.value', 'fr-apples');\ncy.get('.action-select-multiple').select(['apples', 'oranges', 'bananas']);\ncy.get('.action-select-multiple')\n// when getting multiple values, invoke \"val\" method first\n.invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']);\n// Select option(s) with matching value\ncy.get('.action-select').select('fr-bananas');\ncy.get('.action-select')\n// can attach an assertion right away to the element\n.should('have.value', 'fr-bananas');\ncy.get('.action-select-multiple').select(['fr-apples', 'fr-oranges', 'fr-bananas']);\ncy.get('.action-select-multiple').invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']);\n// assert the selected values include oranges\ncy.get('.action-select-multiple').invoke('val').should('include', 'fr-oranges');",
              "err": {},
              "uuid": "602cffae-65c0-458e-a48d-ba11fb2dd194",
              "parentUUID": "c9f1cd20-718b-44c8-8353-05d2c133369b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".scrollIntoView() - scroll an element into view",
              "fullTitle": "Actions .scrollIntoView() - scroll an element into view",
              "timedOut": null,
              "duration": 245,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollintoview\n// normally all of these buttons are hidden,\n// because they're not within\n// the viewable area of their parent\n// (we need to scroll to see them)\ncy.get('#scroll-horizontal button').should('not.be.visible');\n// scroll the button into view, as if the user had scrolled\ncy.get('#scroll-horizontal button').scrollIntoView();\ncy.get('#scroll-horizontal button').should('be.visible');\ncy.get('#scroll-vertical button').should('not.be.visible');\n// Cypress handles the scroll direction needed\ncy.get('#scroll-vertical button').scrollIntoView();\ncy.get('#scroll-vertical button').should('be.visible');\ncy.get('#scroll-both button').should('not.be.visible');\n// Cypress knows to scroll to the right and down\ncy.get('#scroll-both button').scrollIntoView();\ncy.get('#scroll-both button').should('be.visible');",
              "err": {},
              "uuid": "91a73f3b-2ee6-4851-85aa-f41a4cc1a82a",
              "parentUUID": "c9f1cd20-718b-44c8-8353-05d2c133369b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".trigger() - trigger an event on a DOM element",
              "fullTitle": "Actions .trigger() - trigger an event on a DOM element",
              "timedOut": null,
              "duration": 241,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/trigger\n// To interact with a range input (slider)\n// we need to set its value & trigger the\n// event to signal it changed\n// Here, we invoke jQuery's val() method to set\n// the value and trigger the 'change' event\ncy.get('.trigger-input-range').invoke('val', 25);\ncy.get('.trigger-input-range').trigger('change');\ncy.get('.trigger-input-range').get('input[type=range]').siblings('p').should('have.text', '25');",
              "err": {},
              "uuid": "cf5fbcd1-10ff-4465-8277-c4102c48837d",
              "parentUUID": "c9f1cd20-718b-44c8-8353-05d2c133369b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.scrollTo() - scroll the window or element to a position",
              "fullTitle": "Actions cy.scrollTo() - scroll the window or element to a position",
              "timedOut": null,
              "duration": 2259,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollto\n// You can scroll to 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// if you chain .scrollTo() off of cy, we will\n// scroll the entire window\ncy.scrollTo('bottom');\ncy.get('#scrollable-horizontal').scrollTo('right');\n// or you can scroll to a specific coordinate:\n// (x axis, y axis) in pixels\ncy.get('#scrollable-vertical').scrollTo(250, 250);\n// or you can scroll to a specific percentage\n// of the (width, height) of the element\ncy.get('#scrollable-both').scrollTo('75%', '25%');\n// control the easing of the scroll (default is 'swing')\ncy.get('#scrollable-vertical').scrollTo('center', {\n  easing: 'linear'\n});\n// control the duration of the scroll (in ms)\ncy.get('#scrollable-both').scrollTo('center', {\n  duration: 2000\n});",
              "err": {},
              "uuid": "2df2dde0-1ed9-4cdb-acc3-5d1d809d8580",
              "parentUUID": "c9f1cd20-718b-44c8-8353-05d2c133369b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8162c56b-8fa9-4878-896f-b86930abc0e2",
            "22932c75-021d-4d0a-a76e-435e057cccc0",
            "0b115588-f96c-4b42-8f9b-bfdb99a0cef7",
            "e52943a0-010f-47b9-b91d-7686d9b21e03",
            "c92a555d-c15b-4665-b9a2-38c3a7591bd6",
            "1b1b472a-68d2-4398-b3db-a90cea2cf662",
            "15006ed3-ebec-4eab-a9d6-621074013d90",
            "08b6b7a3-936f-4c54-b82c-b8a65b428e1e",
            "a62cccb7-b6ec-4df3-9030-91800c2f8142",
            "b11a8214-27a1-4f73-bfc7-228b34b84112",
            "602cffae-65c0-458e-a48d-ba11fb2dd194",
            "91a73f3b-2ee6-4851-85aa-f41a4cc1a82a",
            "cf5fbcd1-10ff-4465-8277-c4102c48837d",
            "2df2dde0-1ed9-4cdb-acc3-5d1d809d8580"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14589,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "8d1637f6-69ea-48e9-a83a-2b791f85e784",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\aliasing.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\aliasing.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e904b39b-baad-46aa-bf70-74a6c1462773",
          "title": "Aliasing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".as() - alias a DOM element for later use",
              "fullTitle": "Aliasing .as() - alias a DOM element for later use",
              "timedOut": null,
              "duration": 393,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/as\n// Alias a DOM element for use later\n// We don't have to traverse to the element\n// later in our code, we reference it with @\ncy.get('.as-table').find('tbody>tr').first().find('td').first().find('button').as('firstBtn');\n// when we reference the alias, we place an\n// @ in front of its name\ncy.get('@firstBtn').click();\ncy.get('@firstBtn').should('have.class', 'btn-success').and('contain', 'Changed');",
              "err": {},
              "uuid": "965ffa09-18ce-40f7-aa39-1b4d3c5c4263",
              "parentUUID": "e904b39b-baad-46aa-bf70-74a6c1462773",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".as() - alias a route for later use",
              "fullTitle": "Aliasing .as() - alias a route for later use",
              "timedOut": null,
              "duration": 1499,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Alias the route to wait for its response\ncy.intercept('GET', '**/comments/*').as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click();\n// https://on.cypress.io/wait\ncy.wait('@getComment').its('response.statusCode').should('eq', 200);",
              "err": {},
              "uuid": "1879213d-98dd-474d-9127-cdc5564f3fe4",
              "parentUUID": "e904b39b-baad-46aa-bf70-74a6c1462773",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "965ffa09-18ce-40f7-aa39-1b4d3c5c4263",
            "1879213d-98dd-474d-9127-cdc5564f3fe4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1892,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "5aa38107-9cc4-4165-8a08-2d87d66f7967",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\assertions.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\assertions.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "25a7b7d4-b26d-498b-9750-716dba00e55b",
          "title": "Assertions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8798d27d-42dd-4f82-8377-d99340144cc7",
              "title": "Implicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".should() - make an assertion about the current subject",
                  "fullTitle": "Assertions Implicit Assertions .should() - make an assertion about the current subject",
                  "timedOut": null,
                  "duration": 342,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/should\ncy.get('.assertion-table').find('tbody tr:last').should('have.class', 'success').find('td').first()\n// checking the text of the <td> element in various ways\n.should('have.text', 'Column content').should('contain', 'Column content').should('have.html', 'Column content')\n// chai-jquery uses \"is()\" to check if element matches selector\n.should('match', 'td')\n// to match text content against a regular expression\n// first need to invoke jQuery method text()\n// and then match using regular expression\n.invoke('text').should('match', /column content/i);\n// a better way to check element's text content against a regular expression\n// is to use \"cy.contains\"\n// https://on.cypress.io/contains\ncy.get('.assertion-table').find('tbody tr:last')\n// finds first <td> element with text content matching regular expression\n.contains('td', /column content/i).should('be.visible');\n// for more information about asserting element's text\n// see https://on.cypress.io/using-cypress-faq#How-do-I-get-an-element’s-text-contents",
                  "err": {},
                  "uuid": "8305de4d-4515-4aee-b962-991a27380e73",
                  "parentUUID": "8798d27d-42dd-4f82-8377-d99340144cc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": ".and() - chain multiple assertions together",
                  "fullTitle": "Assertions Implicit Assertions .and() - chain multiple assertions together",
                  "timedOut": null,
                  "duration": 150,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/and\ncy.get('.assertions-link').should('have.class', 'active').and('have.attr', 'href').and('include', 'cypress.io');",
                  "err": {},
                  "uuid": "a72d4631-dc63-4445-b594-63a6d22c7bfe",
                  "parentUUID": "8798d27d-42dd-4f82-8377-d99340144cc7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8305de4d-4515-4aee-b962-991a27380e73",
                "a72d4631-dc63-4445-b594-63a6d22c7bfe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 492,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fb51042a-b0d5-4137-a954-1e0f0c569695",
              "title": "Explicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "expect - make an assertion about a specified subject",
                  "fullTitle": "Assertions Explicit Assertions expect - make an assertion about a specified subject",
                  "timedOut": null,
                  "duration": 155,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can use Chai's BDD style assertions\nexpect(true).to.be.true;\nconst o = {\n  foo: 'bar'\n};\nexpect(o).to.equal(o);\nexpect(o).to.deep.equal({\n  foo: 'bar'\n});\n// matching text using regular expression\nexpect('FooBar').to.match(/bar$/i);",
                  "err": {},
                  "uuid": "e71fff72-4652-45a1-90cb-672a6ae2485d",
                  "parentUUID": "fb51042a-b0d5-4137-a954-1e0f0c569695",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "pass your own callback function to should()",
                  "fullTitle": "Assertions Explicit Assertions pass your own callback function to should()",
                  "timedOut": null,
                  "duration": 133,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Pass a function to should that can have any number\n// of explicit assertions within it.\n// The \".should(cb)\" function will be retried\n// automatically until it passes all your explicit assertions or times out.\ncy.get('.assertions-p').find('p').should($p => {\n  // https://on.cypress.io/$\n  // return an array of texts from all of the p's\n  const texts = $p.map((i, el) => Cypress.$(el).text());\n  // jquery map returns jquery object\n  // and .get() convert this to simple array\n  const paragraphs = texts.get();\n  // array should have length of 3\n  expect(paragraphs, 'has 3 paragraphs').to.have.length(3);\n  // use second argument to expect(...) to provide clear\n  // message with each assertion\n  expect(paragraphs, 'has expected text in each paragraph').to.deep.eq(['Some text from first p', 'More text from second p', 'And even more text from third p']);\n});",
                  "err": {},
                  "uuid": "c35566a1-302c-4677-922c-ff83e078790c",
                  "parentUUID": "fb51042a-b0d5-4137-a954-1e0f0c569695",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "finds element by class name regex",
                  "fullTitle": "Assertions Explicit Assertions finds element by class name regex",
                  "timedOut": null,
                  "duration": 143,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.docs-header').find('div')\n// .should(cb) callback function will be retried\n.should($div => {\n  expect($div).to.have.length(1);\n  const className = $div[0].className;\n  expect(className).to.match(/heading-/);\n})\n// .then(cb) callback is not retried,\n// it either passes or fails\n.then($div => {\n  expect($div, 'text content').to.have.text('Introduction');\n});",
                  "err": {},
                  "uuid": "2fa2667d-ad98-4150-9148-4a512c04c7e3",
                  "parentUUID": "fb51042a-b0d5-4137-a954-1e0f0c569695",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can throw any error",
                  "fullTitle": "Assertions Explicit Assertions can throw any error",
                  "timedOut": null,
                  "duration": 134,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.docs-header').find('div').should($div => {\n  if ($div.length !== 1) {\n    // you can throw your own errors\n    throw new Error('Did not find 1 element');\n  }\n  const className = $div[0].className;\n  if (!className.match(/heading-/)) {\n    throw new Error(`Could not find class \"heading-\" in ${className}`);\n  }\n});",
                  "err": {},
                  "uuid": "d04aaed9-8e54-433f-b4ec-326f18b8ac40",
                  "parentUUID": "fb51042a-b0d5-4137-a954-1e0f0c569695",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "matches unknown text between two elements",
                  "fullTitle": "Assertions Explicit Assertions matches unknown text between two elements",
                  "timedOut": null,
                  "duration": 145,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/**\n * Text from the first element.\n * @type {string}\n*/\nlet text;\n/**\n * Normalizes passed text,\n * useful before comparing text with spaces and different capitalization.\n * @param {string} s Text to normalize\n*/\nconst normalizeText = s => s.replace(/\\s/g, '').toLowerCase();\ncy.get('.two-elements').find('.first').then($first => {\n  // save text from the first element\n  text = normalizeText($first.text());\n});\ncy.get('.two-elements').find('.second').should($div => {\n  // we can massage text before comparing\n  const secondText = normalizeText($div.text());\n  expect(secondText, 'second text').to.equal(text);\n});",
                  "err": {},
                  "uuid": "96f14fb9-40b0-4fca-a96c-3d232f02fa59",
                  "parentUUID": "fb51042a-b0d5-4137-a954-1e0f0c569695",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "assert - assert shape of an object",
                  "fullTitle": "Assertions Explicit Assertions assert - assert shape of an object",
                  "timedOut": null,
                  "duration": 146,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const person = {\n  name: 'Joe',\n  age: 20\n};\nassert.isObject(person, 'value is object');",
                  "err": {},
                  "uuid": "cd838fcf-c604-4b8f-95b4-c79604b16715",
                  "parentUUID": "fb51042a-b0d5-4137-a954-1e0f0c569695",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retries the should callback until assertions pass",
                  "fullTitle": "Assertions Explicit Assertions retries the should callback until assertions pass",
                  "timedOut": null,
                  "duration": 1641,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('#random-number').should($div => {\n  const n = parseFloat($div.text());\n  expect(n).to.be.gte(1).and.be.lte(10);\n});",
                  "err": {},
                  "uuid": "61a54c87-56f6-4e8e-951d-12d85849c5f3",
                  "parentUUID": "fb51042a-b0d5-4137-a954-1e0f0c569695",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e71fff72-4652-45a1-90cb-672a6ae2485d",
                "c35566a1-302c-4677-922c-ff83e078790c",
                "2fa2667d-ad98-4150-9148-4a512c04c7e3",
                "d04aaed9-8e54-433f-b4ec-326f18b8ac40",
                "96f14fb9-40b0-4fca-a96c-3d232f02fa59",
                "cd838fcf-c604-4b8f-95b4-c79604b16715",
                "61a54c87-56f6-4e8e-951d-12d85849c5f3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2497,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e343464c-5902-45a9-8926-418e4b537cf5",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\connectors.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\connectors.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e6d17cf8-5a66-43c5-b882-6f32f1fdd2f0",
          "title": "Connectors",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".each() - iterate over an array of elements",
              "fullTitle": "Connectors .each() - iterate over an array of elements",
              "timedOut": null,
              "duration": 291,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/each\ncy.get('.connectors-each-ul>li').each(($el, index, $list) => {\n  console.log($el, index, $list);\n});",
              "err": {},
              "uuid": "0434cb9f-f296-4d75-bbd7-89e07b4da6e2",
              "parentUUID": "e6d17cf8-5a66-43c5-b882-6f32f1fdd2f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".its() - get properties on the current subject",
              "fullTitle": "Connectors .its() - get properties on the current subject",
              "timedOut": null,
              "duration": 128,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/its\ncy.get('.connectors-its-ul>li')\n// calls the 'length' property yielding that value\n.its('length').should('be.gt', 2);",
              "err": {},
              "uuid": "541c1fd7-7c6f-4b40-8dba-ffd80a03d7dc",
              "parentUUID": "e6d17cf8-5a66-43c5-b882-6f32f1fdd2f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".invoke() - invoke a function on the current subject",
              "fullTitle": "Connectors .invoke() - invoke a function on the current subject",
              "timedOut": null,
              "duration": 120,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// our div is hidden in our script.js\n// $('.connectors-div').hide()\ncy.get('.connectors-div').should('be.hidden');\n// https://on.cypress.io/invoke\n// call the jquery method 'show' on the 'div.container'\ncy.get('.connectors-div').invoke('show');\ncy.get('.connectors-div').should('be.visible');",
              "err": {},
              "uuid": "8bbb8cfd-9cd1-4043-b4a7-8e534a740c1c",
              "parentUUID": "e6d17cf8-5a66-43c5-b882-6f32f1fdd2f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".spread() - spread an array as individual args to callback function",
              "fullTitle": "Connectors .spread() - spread an array as individual args to callback function",
              "timedOut": null,
              "duration": 115,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/spread\nconst arr = ['foo', 'bar', 'baz'];\ncy.wrap(arr).spread((foo, bar, baz) => {\n  expect(foo).to.eq('foo');\n  expect(bar).to.eq('bar');\n  expect(baz).to.eq('baz');\n});",
              "err": {},
              "uuid": "2de79081-77a7-4017-b4ea-2c0ef2905fb7",
              "parentUUID": "e6d17cf8-5a66-43c5-b882-6f32f1fdd2f0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "baf5738c-a5b2-473b-8bb5-9520c10aba81",
              "title": ".then()",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invokes a callback function with the current subject",
                  "fullTitle": "Connectors .then() invokes a callback function with the current subject",
                  "timedOut": null,
                  "duration": 150,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/then\ncy.get('.connectors-list > li').then($lis => {\n  expect($lis, '3 items').to.have.length(3);\n  expect($lis.eq(0), 'first item').to.contain('Walk the dog');\n  expect($lis.eq(1), 'second item').to.contain('Feed the cat');\n  expect($lis.eq(2), 'third item').to.contain('Write JavaScript');\n});",
                  "err": {},
                  "uuid": "f0e7c719-a87e-4813-9868-ebb21722d7e4",
                  "parentUUID": "baf5738c-a5b2-473b-8bb5-9520c10aba81",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the returned value to the next command",
                  "fullTitle": "Connectors .then() yields the returned value to the next command",
                  "timedOut": null,
                  "duration": 135,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1);\n  return 2;\n}).then(num => {\n  expect(num).to.equal(2);\n});",
                  "err": {},
                  "uuid": "f0a0f258-92e2-4106-aaa1-e74354477bc3",
                  "parentUUID": "baf5738c-a5b2-473b-8bb5-9520c10aba81",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the original subject without return",
                  "fullTitle": "Connectors .then() yields the original subject without return",
                  "timedOut": null,
                  "duration": 143,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1);\n  // note that nothing is returned from this callback\n}).then(num => {\n  // this callback receives the original unchanged value 1\n  expect(num).to.equal(1);\n});",
                  "err": {},
                  "uuid": "d22308ea-29d5-4052-8c18-0620859f825b",
                  "parentUUID": "baf5738c-a5b2-473b-8bb5-9520c10aba81",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the value yielded by the last Cypress command inside",
                  "fullTitle": "Connectors .then() yields the value yielded by the last Cypress command inside",
                  "timedOut": null,
                  "duration": 146,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1);\n  // note how we run a Cypress command\n  // the result yielded by this Cypress command\n  // will be passed to the second \".then\"\n  cy.wrap(2);\n}).then(num => {\n  // this callback receives the value yielded by \"cy.wrap(2)\"\n  expect(num).to.equal(2);\n});",
                  "err": {},
                  "uuid": "57da7dc6-2353-4e8a-9200-fd13fdb62e20",
                  "parentUUID": "baf5738c-a5b2-473b-8bb5-9520c10aba81",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f0e7c719-a87e-4813-9868-ebb21722d7e4",
                "f0a0f258-92e2-4106-aaa1-e74354477bc3",
                "d22308ea-29d5-4052-8c18-0620859f825b",
                "57da7dc6-2353-4e8a-9200-fd13fdb62e20"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 574,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "0434cb9f-f296-4d75-bbd7-89e07b4da6e2",
            "541c1fd7-7c6f-4b40-8dba-ffd80a03d7dc",
            "8bbb8cfd-9cd1-4043-b4a7-8e534a740c1c",
            "2de79081-77a7-4017-b4ea-2c0ef2905fb7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 654,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d9d69c11-766f-49a2-9918-d53d68682a9e",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\cookies.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\cookies.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "50faa639-639c-4cf0-9a1c-5373d0ac8d25",
          "title": "Cookies",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.getCookie() - get a browser cookie",
              "fullTitle": "Cookies cy.getCookie() - get a browser cookie",
              "timedOut": null,
              "duration": 362,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getcookie\ncy.get('#getCookie .set-a-cookie').click();\n// cy.getCookie() yields a cookie object\ncy.getCookie('token').should('have.property', 'value', '123ABC');",
              "err": {},
              "uuid": "80d46d9c-323f-4d9b-89cc-adbaeeb2db14",
              "parentUUID": "50faa639-639c-4cf0-9a1c-5373d0ac8d25",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getCookies() - get browser cookies for the current domain",
              "fullTitle": "Cookies cy.getCookies() - get browser cookies for the current domain",
              "timedOut": null,
              "duration": 262,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getcookies\ncy.getCookies().should('be.empty');\ncy.get('#getCookies .set-a-cookie').click();\n// cy.getCookies() yields an array of cookies\ncy.getCookies().should('have.length', 1).should(cookies => {\n  // each cookie has these properties\n  expect(cookies[0]).to.have.property('name', 'token');\n  expect(cookies[0]).to.have.property('value', '123ABC');\n  expect(cookies[0]).to.have.property('httpOnly', false);\n  expect(cookies[0]).to.have.property('secure', false);\n  expect(cookies[0]).to.have.property('domain');\n  expect(cookies[0]).to.have.property('path');\n});",
              "err": {},
              "uuid": "2686780f-e2ca-4079-b96f-c1371891d5d4",
              "parentUUID": "50faa639-639c-4cf0-9a1c-5373d0ac8d25",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getAllCookies() - get all browser cookies",
              "fullTitle": "Cookies cy.getAllCookies() - get all browser cookies",
              "timedOut": null,
              "duration": 165,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getallcookies\ncy.getAllCookies().should('be.empty');\ncy.setCookie('key', 'value');\ncy.setCookie('key', 'value', {\n  domain: '.example.com'\n});\n// cy.getAllCookies() yields an array of cookies\ncy.getAllCookies().should('have.length', 2).should(cookies => {\n  // each cookie has these properties\n  expect(cookies[0]).to.have.property('name', 'key');\n  expect(cookies[0]).to.have.property('value', 'value');\n  expect(cookies[0]).to.have.property('httpOnly', false);\n  expect(cookies[0]).to.have.property('secure', false);\n  expect(cookies[0]).to.have.property('domain');\n  expect(cookies[0]).to.have.property('path');\n  expect(cookies[1]).to.have.property('name', 'key');\n  expect(cookies[1]).to.have.property('value', 'value');\n  expect(cookies[1]).to.have.property('httpOnly', false);\n  expect(cookies[1]).to.have.property('secure', false);\n  expect(cookies[1]).to.have.property('domain', '.example.com');\n  expect(cookies[1]).to.have.property('path');\n});",
              "err": {},
              "uuid": "9faa8edc-b472-4167-930a-968933543612",
              "parentUUID": "50faa639-639c-4cf0-9a1c-5373d0ac8d25",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.setCookie() - set a browser cookie",
              "fullTitle": "Cookies cy.setCookie() - set a browser cookie",
              "timedOut": null,
              "duration": 167,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/setcookie\ncy.getCookies().should('be.empty');\ncy.setCookie('foo', 'bar');\n// cy.getCookie() yields a cookie object\ncy.getCookie('foo').should('have.property', 'value', 'bar');",
              "err": {},
              "uuid": "1c544c66-9d44-405b-99fb-35e9e229b473",
              "parentUUID": "50faa639-639c-4cf0-9a1c-5373d0ac8d25",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearCookie() - clear a browser cookie",
              "fullTitle": "Cookies cy.clearCookie() - clear a browser cookie",
              "timedOut": null,
              "duration": 230,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearcookie\ncy.getCookie('token').should('be.null');\ncy.get('#clearCookie .set-a-cookie').click();\ncy.getCookie('token').should('have.property', 'value', '123ABC');\n// cy.clearCookies() yields null\ncy.clearCookie('token');\ncy.getCookie('token').should('be.null');",
              "err": {},
              "uuid": "3c247298-06d5-4486-9823-f235f35bf47f",
              "parentUUID": "50faa639-639c-4cf0-9a1c-5373d0ac8d25",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearCookies() - clear browser cookies for the current domain",
              "fullTitle": "Cookies cy.clearCookies() - clear browser cookies for the current domain",
              "timedOut": null,
              "duration": 245,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearcookies\ncy.getCookies().should('be.empty');\ncy.get('#clearCookies .set-a-cookie').click();\ncy.getCookies().should('have.length', 1);\n// cy.clearCookies() yields null\ncy.clearCookies();\ncy.getCookies().should('be.empty');",
              "err": {},
              "uuid": "4e564781-08ac-4bfd-9dd5-b652f1000c5a",
              "parentUUID": "50faa639-639c-4cf0-9a1c-5373d0ac8d25",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearAllCookies() - clear all browser cookies",
              "fullTitle": "Cookies cy.clearAllCookies() - clear all browser cookies",
              "timedOut": null,
              "duration": 155,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearallcookies\ncy.getAllCookies().should('be.empty');\ncy.setCookie('key', 'value');\ncy.setCookie('key', 'value', {\n  domain: '.example.com'\n});\ncy.getAllCookies().should('have.length', 2);\n// cy.clearAllCookies() yields null\ncy.clearAllCookies();\ncy.getAllCookies().should('be.empty');",
              "err": {},
              "uuid": "51507608-1851-4e64-91f7-5078444e991a",
              "parentUUID": "50faa639-639c-4cf0-9a1c-5373d0ac8d25",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "80d46d9c-323f-4d9b-89cc-adbaeeb2db14",
            "2686780f-e2ca-4079-b96f-c1371891d5d4",
            "9faa8edc-b472-4167-930a-968933543612",
            "1c544c66-9d44-405b-99fb-35e9e229b473",
            "3c247298-06d5-4486-9823-f235f35bf47f",
            "4e564781-08ac-4bfd-9dd5-b652f1000c5a",
            "51507608-1851-4e64-91f7-5078444e991a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1586,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "a9d811e7-a49f-4ac3-8547-e0b139f90201",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\cypress_api.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\cypress_api.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "24fd8a85-5a53-4d9d-b64f-b17694d601f9",
          "title": "Cypress APIs",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0a67fd20-218c-4f23-874d-7efcda270cf5",
              "title": "Cypress.Commands",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".add() - create a custom command",
                  "fullTitle": "Cypress APIs Cypress.Commands .add() - create a custom command",
                  "timedOut": null,
                  "duration": 316,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Cypress.Commands.add('console', {\n  prevSubject: true\n}, (subject, method) => {\n  // the previous subject is automatically received\n  // and the commands arguments are shifted\n  // allow us to change the console method used\n  method = method || 'log';\n  // log the subject to the console\n  console[method]('The subject is', subject);\n  // whatever we return becomes the new subject\n  // we don't want to change the subject so\n  // we return whatever was passed in\n  return subject;\n});\ncy.get('button').console('info').then($button => {\n  // subject is still $button\n});",
                  "err": {},
                  "uuid": "90e50652-28ea-43bf-bcbb-6f0f0ba622ef",
                  "parentUUID": "0a67fd20-218c-4f23-874d-7efcda270cf5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "90e50652-28ea-43bf-bcbb-6f0f0ba622ef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 316,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f1d4f242-5ff4-4f0d-8b55-f554ec9decb1",
              "title": "Cypress.Cookies",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".debug() - enable or disable debugging",
                  "fullTitle": "Cypress APIs Cypress.Cookies .debug() - enable or disable debugging",
                  "timedOut": null,
                  "duration": 143,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Cypress.Cookies.debug(true);\n// Cypress will now log in the console when\n// cookies are set or cleared\ncy.setCookie('fakeCookie', '123ABC');\ncy.clearCookie('fakeCookie');\ncy.setCookie('fakeCookie', '123ABC');\ncy.clearCookie('fakeCookie');\ncy.setCookie('fakeCookie', '123ABC');",
                  "err": {},
                  "uuid": "c223b822-6f48-4738-ba27-28794a363d92",
                  "parentUUID": "f1d4f242-5ff4-4f0d-8b55-f554ec9decb1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c223b822-6f48-4738-ba27-28794a363d92"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 143,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1a3cc77b-167c-40a9-88be-19547e3418d2",
              "title": "Cypress.arch",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get CPU architecture name of underlying OS",
                  "fullTitle": "Cypress APIs Cypress.arch Get CPU architecture name of underlying OS",
                  "timedOut": null,
                  "duration": 107,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/arch\nexpect(Cypress.arch).to.exist;",
                  "err": {},
                  "uuid": "513105dd-b92a-4947-9b52-4c563f77cbb3",
                  "parentUUID": "1a3cc77b-167c-40a9-88be-19547e3418d2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "513105dd-b92a-4947-9b52-4c563f77cbb3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 107,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3747e3a0-59fd-4931-a87e-f20e9992c475",
              "title": "Cypress.config()",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get and set configuration options",
                  "fullTitle": "Cypress APIs Cypress.config() Get and set configuration options",
                  "timedOut": null,
                  "duration": 375,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"\\\\2-advanced-examples\\\\cypress_api.cy.js\\\\Cypress APIs -- Cypress.config() -- Get and set configuration options (failed).png\"\n    ]\n  ]\n}",
                  "code": "// https://on.cypress.io/config\nlet myConfig = Cypress.config();\nexpect(myConfig).to.have.property('animationDistanceThreshold', 5);\nexpect(myConfig).to.have.property('baseUrl', null);\nexpect(myConfig).to.have.property('defaultCommandTimeout', 4000);\nexpect(myConfig).to.have.property('requestTimeout', 5000);\nexpect(myConfig).to.have.property('responseTimeout', 30000);\nexpect(myConfig).to.have.property('viewportHeight', 660);\nexpect(myConfig).to.have.property('viewportWidth', 1000);\nexpect(myConfig).to.have.property('pageLoadTimeout', 60000);\nexpect(myConfig).to.have.property('waitForAnimations', true);\nexpect(Cypress.config('pageLoadTimeout')).to.eq(60000);\n// this will change the config for the rest of your tests!\nCypress.config('pageLoadTimeout', 20000);\nexpect(Cypress.config('pageLoadTimeout')).to.eq(20000);\nCypress.config('pageLoadTimeout', 60000);",
                  "err": {
                    "message": "AssertionError: expected { Object (baseUrl, setupNodeEvents, ...) } to have property 'baseUrl' of null, but got 'https://practice.expandtesting.com/'",
                    "estack": "AssertionError: expected { Object (baseUrl, setupNodeEvents, ...) } to have property 'baseUrl' of null, but got 'https://practice.expandtesting.com/'\n    at Context.eval (webpack://cypress/./cypress/e2e/2-advanced-examples/cypress_api.cy.js:76:31)",
                    "diff": null
                  },
                  "uuid": "8f1c8ee0-5b8c-48e4-bea9-f0c819c38e6d",
                  "parentUUID": "3747e3a0-59fd-4931-a87e-f20e9992c475",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "8f1c8ee0-5b8c-48e4-bea9-f0c819c38e6d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 375,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e45bfc7c-f9cb-4bb9-8e87-db9b6b7d6575",
              "title": "Cypress.dom",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".isHidden() - determine if a DOM element is hidden",
                  "fullTitle": "Cypress APIs Cypress.dom .isHidden() - determine if a DOM element is hidden",
                  "timedOut": null,
                  "duration": 107,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let hiddenP = Cypress.$('.dom-p p.hidden').get(0);\nlet visibleP = Cypress.$('.dom-p p.visible').get(0);\n// our first paragraph has css class 'hidden'\nexpect(Cypress.dom.isHidden(hiddenP)).to.be.true;\nexpect(Cypress.dom.isHidden(visibleP)).to.be.false;",
                  "err": {},
                  "uuid": "77225fa8-1d6a-44ce-9663-1be940eef39c",
                  "parentUUID": "e45bfc7c-f9cb-4bb9-8e87-db9b6b7d6575",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "77225fa8-1d6a-44ce-9663-1be940eef39c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 107,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7a7e1f7e-b85d-4c5e-874c-18255da95616",
              "title": "Cypress.env()",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get environment variables",
                  "fullTitle": "Cypress APIs Cypress.env() Get environment variables",
                  "timedOut": null,
                  "duration": 105,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/env\n// set multiple environment variables\nCypress.env({\n  host: 'veronica.dev.local',\n  api_server: 'http://localhost:8888/v1/'\n});\n// get environment variable\nexpect(Cypress.env('host')).to.eq('veronica.dev.local');\n// set environment variable\nCypress.env('api_server', 'http://localhost:8888/v2/');\nexpect(Cypress.env('api_server')).to.eq('http://localhost:8888/v2/');\n// get all environment variable\nexpect(Cypress.env()).to.have.property('host', 'veronica.dev.local');\nexpect(Cypress.env()).to.have.property('api_server', 'http://localhost:8888/v2/');",
                  "err": {},
                  "uuid": "30bb6ca2-b7c8-486c-899c-11d720e99c6b",
                  "parentUUID": "7a7e1f7e-b85d-4c5e-874c-18255da95616",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "30bb6ca2-b7c8-486c-899c-11d720e99c6b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 105,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6cffb6a3-edec-4a06-91da-89c6c4e5b8df",
              "title": "Cypress.log",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Control what is printed to the Command Log",
                  "fullTitle": "Cypress APIs Cypress.log Control what is printed to the Command Log",
                  "timedOut": null,
                  "duration": 88,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/cypress-log",
                  "err": {},
                  "uuid": "fa8345a9-741f-4bb1-b87f-4222344a7c92",
                  "parentUUID": "6cffb6a3-edec-4a06-91da-89c6c4e5b8df",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fa8345a9-741f-4bb1-b87f-4222344a7c92"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 88,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "53f15231-81a8-4e2f-8550-217dad7a313a",
              "title": "Cypress.platform",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get underlying OS name",
                  "fullTitle": "Cypress APIs Cypress.platform Get underlying OS name",
                  "timedOut": null,
                  "duration": 128,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/platform\nexpect(Cypress.platform).to.be.exist;",
                  "err": {},
                  "uuid": "dc942ef2-da61-4609-afbf-e364d21724f4",
                  "parentUUID": "53f15231-81a8-4e2f-8550-217dad7a313a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc942ef2-da61-4609-afbf-e364d21724f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 128,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6d2fd041-8ff3-4363-a794-ba6b3f04a86c",
              "title": "Cypress.version",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get current version of Cypress being run",
                  "fullTitle": "Cypress APIs Cypress.version Get current version of Cypress being run",
                  "timedOut": null,
                  "duration": 104,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/version\nexpect(Cypress.version).to.be.exist;",
                  "err": {},
                  "uuid": "f59c0d7a-a8ec-41f8-943b-831da7312e3e",
                  "parentUUID": "6d2fd041-8ff3-4363-a794-ba6b3f04a86c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f59c0d7a-a8ec-41f8-943b-831da7312e3e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 104,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "da6e5ca5-4dea-408a-9c9c-9ba22f318ef5",
              "title": "Cypress.spec",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get current spec information",
                  "fullTitle": "Cypress APIs Cypress.spec Get current spec information",
                  "timedOut": null,
                  "duration": 116,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/spec\n// wrap the object so we can inspect it easily by clicking in the command log\ncy.wrap(Cypress.spec).should('include.keys', ['name', 'relative', 'absolute']);",
                  "err": {},
                  "uuid": "f76308fe-647d-49be-8474-88d1616a1755",
                  "parentUUID": "da6e5ca5-4dea-408a-9c9c-9ba22f318ef5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f76308fe-647d-49be-8474-88d1616a1755"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 116,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "88f86f5d-3071-48cf-9dee-b1d71759f752",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\files.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\files.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "03848ac9-a021-4098-bd7a-293095bea6d9",
          "title": "Files",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.fixture() - load a fixture",
              "fullTitle": "Files cy.fixture() - load a fixture",
              "timedOut": null,
              "duration": 379,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/fixture\n// Instead of writing a response inline you can\n// use a fixture file's content.\n// when application makes an Ajax request matching \"GET **/comments/*\"\n// Cypress will intercept it and reply with the object in `example.json` fixture\ncy.intercept('GET', '**/comments/*', {\n  fixture: 'example.json'\n}).as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.fixture-btn').click();\ncy.wait('@getComment').its('response.body').should('have.property', 'name').and('include', 'Using fixtures to represent data');",
              "err": {},
              "uuid": "3e14ac22-885d-4b89-a843-c0c2d6dfea30",
              "parentUUID": "03848ac9-a021-4098-bd7a-293095bea6d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.fixture() or require - load a fixture",
              "fullTitle": "Files cy.fixture() or require - load a fixture",
              "timedOut": null,
              "duration": 137,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// we are inside the \"function () { ... }\"\n// callback and can use test context object \"this\"\n// \"this.example\" was loaded in \"beforeEach\" function callback\nexpect(this.example, 'fixture in the test context').to.deep.equal(requiredExample);\n// or use \"cy.wrap\" and \"should('deep.equal', ...)\" assertion\ncy.wrap(this.example).should('deep.equal', requiredExample);",
              "err": {},
              "uuid": "f8f030bb-a332-48c7-8073-d89e2f1533c5",
              "parentUUID": "03848ac9-a021-4098-bd7a-293095bea6d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.readFile() - read file contents",
              "fullTitle": "Files cy.readFile() - read file contents",
              "timedOut": null,
              "duration": 172,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/readfile\n// You can read a file and yield its contents\n// The filePath is relative to your project's root.\ncy.readFile(Cypress.config('configFile')).then(config => {\n  expect(config).to.be.an('string');\n});",
              "err": {},
              "uuid": "913fb8f5-2176-46bc-90e7-8600a98cf436",
              "parentUUID": "03848ac9-a021-4098-bd7a-293095bea6d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.writeFile() - write to a file",
              "fullTitle": "Files cy.writeFile() - write to a file",
              "timedOut": null,
              "duration": 484,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/writefile\n// You can write to a file\n// Use a response from a request to automatically\n// generate a fixture file for use later\ncy.request('https://jsonplaceholder.cypress.io/users').then(response => {\n  cy.writeFile('cypress/fixtures/users.json', response.body);\n});\ncy.fixture('users').should(users => {\n  expect(users[0].name).to.exist;\n});\n// JavaScript arrays and objects are stringified\n// and formatted into text.\ncy.writeFile('cypress/fixtures/profile.json', {\n  id: 8739,\n  name: 'Jane',\n  email: 'jane@example.com'\n});\ncy.fixture('profile').should(profile => {\n  expect(profile.name).to.eq('Jane');\n});",
              "err": {},
              "uuid": "f893ead9-72db-4bee-9673-3dd84d78710c",
              "parentUUID": "03848ac9-a021-4098-bd7a-293095bea6d9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3e14ac22-885d-4b89-a843-c0c2d6dfea30",
            "f8f030bb-a332-48c7-8073-d89e2f1533c5",
            "913fb8f5-2176-46bc-90e7-8600a98cf436",
            "f893ead9-72db-4bee-9673-3dd84d78710c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1172,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "0ec82998-3eee-472f-9b36-444c7123eb56",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\location.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\location.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a2bb0cb1-13c8-4cc2-a073-561cd73a8cb3",
          "title": "Location",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.hash() - get the current URL hash",
              "fullTitle": "Location cy.hash() - get the current URL hash",
              "timedOut": null,
              "duration": 262,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/hash\ncy.hash().should('be.empty');",
              "err": {},
              "uuid": "4da50f6e-7f03-4e9c-87b2-240e3639a636",
              "parentUUID": "a2bb0cb1-13c8-4cc2-a073-561cd73a8cb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.location() - get window.location",
              "fullTitle": "Location cy.location() - get window.location",
              "timedOut": null,
              "duration": 139,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/location\ncy.location().should(location => {\n  expect(location.hash).to.be.empty;\n  expect(location.href).to.eq('https://example.cypress.io/commands/location');\n  expect(location.host).to.eq('example.cypress.io');\n  expect(location.hostname).to.eq('example.cypress.io');\n  expect(location.origin).to.eq('https://example.cypress.io');\n  expect(location.pathname).to.eq('/commands/location');\n  expect(location.port).to.eq('');\n  expect(location.protocol).to.eq('https:');\n  expect(location.search).to.be.empty;\n});",
              "err": {},
              "uuid": "3d84d72b-3809-439e-9273-045baa5f4f23",
              "parentUUID": "a2bb0cb1-13c8-4cc2-a073-561cd73a8cb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.url() - get the current URL",
              "fullTitle": "Location cy.url() - get the current URL",
              "timedOut": null,
              "duration": 121,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/url\ncy.url().should('eq', 'https://example.cypress.io/commands/location');",
              "err": {},
              "uuid": "2e789494-5012-4394-8a3e-51e2d3b997c8",
              "parentUUID": "a2bb0cb1-13c8-4cc2-a073-561cd73a8cb3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4da50f6e-7f03-4e9c-87b2-240e3639a636",
            "3d84d72b-3809-439e-9273-045baa5f4f23",
            "2e789494-5012-4394-8a3e-51e2d3b997c8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 522,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "1375f2a5-3f7e-478c-9218-59e08711a1f9",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\misc.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\misc.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d21b5fff-4dcd-4e93-9959-bea22bff0e47",
          "title": "Misc",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.exec() - execute a system command",
              "fullTitle": "Misc cy.exec() - execute a system command",
              "timedOut": null,
              "duration": 356,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// execute a system command.\n// so you can take actions necessary for\n// your test outside the scope of Cypress.\n// https://on.cypress.io/exec\n// we can use Cypress.platform string to\n// select appropriate command\n// https://on.cypress/io/platform\ncy.log(`Platform ${Cypress.platform} architecture ${Cypress.arch}`);\n// on CircleCI Windows build machines we have a failure to run bash shell\n// https://github.com/cypress-io/cypress/issues/5169\n// so skip some of the tests by passing flag \"--env circle=true\"\nconst isCircleOnWindows = Cypress.platform === 'win32' && Cypress.env('circle');\nif (isCircleOnWindows) {\n  cy.log('Skipping test on CircleCI');\n  return;\n}\n// cy.exec problem on Shippable CI\n// https://github.com/cypress-io/cypress/issues/6718\nconst isShippable = Cypress.platform === 'linux' && Cypress.env('shippable');\nif (isShippable) {\n  cy.log('Skipping test on ShippableCI');\n  return;\n}\ncy.exec('echo Jane Lane').its('stdout').should('contain', 'Jane Lane');\nif (Cypress.platform === 'win32') {\n  cy.exec(`print ${Cypress.config('configFile')}`).its('stderr').should('be.empty');\n} else {\n  cy.exec(`cat ${Cypress.config('configFile')}`).its('stderr').should('be.empty');\n  cy.exec('pwd').its('code').should('eq', 0);\n}",
              "err": {},
              "uuid": "392aa174-ee09-4db9-a474-5c4f288ef7b2",
              "parentUUID": "d21b5fff-4dcd-4e93-9959-bea22bff0e47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.focused() - get the DOM element that has focus",
              "fullTitle": "Misc cy.focused() - get the DOM element that has focus",
              "timedOut": null,
              "duration": 318,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/focused\ncy.get('.misc-form').find('#name').click();\ncy.focused().should('have.id', 'name');\ncy.get('.misc-form').find('#description').click();\ncy.focused().should('have.id', 'description');",
              "err": {},
              "uuid": "cb9c3358-7bb4-490f-8951-6078260618cd",
              "parentUUID": "d21b5fff-4dcd-4e93-9959-bea22bff0e47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.wrap() - wrap an object",
              "fullTitle": "Misc cy.wrap() - wrap an object",
              "timedOut": null,
              "duration": 100,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/wrap\ncy.wrap({\n  foo: 'bar'\n}).should('have.property', 'foo').and('include', 'bar');",
              "err": {},
              "uuid": "7b27eff8-b418-4210-8686-fe638dd6f6d9",
              "parentUUID": "d21b5fff-4dcd-4e93-9959-bea22bff0e47",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "3366989e-4f0c-4529-8c05-79242288d43e",
              "title": "Cypress.Screenshot",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cy.screenshot() - take a screenshot",
                  "fullTitle": "Misc Cypress.Screenshot cy.screenshot() - take a screenshot",
                  "timedOut": null,
                  "duration": 1371,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"\\\\2-advanced-examples\\\\misc.cy.js\\\\my-image.png\"\n    ]\n  ]\n}",
                  "code": "// https://on.cypress.io/screenshot\ncy.screenshot('my-image');",
                  "err": {},
                  "uuid": "f70b8061-656d-48aa-b110-25e6fb9fc542",
                  "parentUUID": "3366989e-4f0c-4529-8c05-79242288d43e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cypress.Screenshot.defaults() - change default config of screenshots",
                  "fullTitle": "Misc Cypress.Screenshot Cypress.Screenshot.defaults() - change default config of screenshots",
                  "timedOut": null,
                  "duration": 85,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Cypress.Screenshot.defaults({\n  blackout: ['.foo'],\n  capture: 'viewport',\n  clip: {\n    x: 0,\n    y: 0,\n    width: 200,\n    height: 200\n  },\n  scale: false,\n  disableTimersAndAnimations: true,\n  screenshotOnRunFailure: true,\n  onBeforeScreenshot() {},\n  onAfterScreenshot() {}\n});",
                  "err": {},
                  "uuid": "d66dcfb7-dd08-41f6-8cc9-f4a6714161ff",
                  "parentUUID": "3366989e-4f0c-4529-8c05-79242288d43e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f70b8061-656d-48aa-b110-25e6fb9fc542",
                "d66dcfb7-dd08-41f6-8cc9-f4a6714161ff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1456,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "392aa174-ee09-4db9-a474-5c4f288ef7b2",
            "cb9c3358-7bb4-490f-8951-6078260618cd",
            "7b27eff8-b418-4210-8686-fe638dd6f6d9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 774,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "52216dac-76bb-41a3-92e7-8caceef85a62",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\navigation.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\navigation.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6c47679c-928b-4d72-b325-e32c0532c0fd",
          "title": "Navigation",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.go() - go back or forward in the browser's history",
              "fullTitle": "Navigation cy.go() - go back or forward in the browser's history",
              "timedOut": null,
              "duration": 1164,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/go\ncy.location('pathname').should('include', 'navigation');\ncy.go('back');\ncy.location('pathname').should('not.include', 'navigation');\ncy.go('forward');\ncy.location('pathname').should('include', 'navigation');\n// clicking back\ncy.go(-1);\ncy.location('pathname').should('not.include', 'navigation');\n// clicking forward\ncy.go(1);\ncy.location('pathname').should('include', 'navigation');",
              "err": {},
              "uuid": "24d3326d-c4bd-4655-9b40-88a70cd095b8",
              "parentUUID": "6c47679c-928b-4d72-b325-e32c0532c0fd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.reload() - reload the page",
              "fullTitle": "Navigation cy.reload() - reload the page",
              "timedOut": null,
              "duration": 412,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/reload\ncy.reload();\n// reload the page without using the cache\ncy.reload(true);",
              "err": {},
              "uuid": "f504dac5-6a32-4e92-a796-4ba540746066",
              "parentUUID": "6c47679c-928b-4d72-b325-e32c0532c0fd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.visit() - visit a remote url",
              "fullTitle": "Navigation cy.visit() - visit a remote url",
              "timedOut": null,
              "duration": 404,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/visit\n// Visit any sub-domain of your current domain\n// Pass options to the visit\ncy.visit('https://example.cypress.io/commands/navigation', {\n  timeout: 50000,\n  // increase total time for the visit to resolve\n  onBeforeLoad(contentWindow) {\n    // contentWindow is the remote page's window object\n    expect(typeof contentWindow === 'object').to.be.true;\n  },\n  onLoad(contentWindow) {\n    // contentWindow is the remote page's window object\n    expect(typeof contentWindow === 'object').to.be.true;\n  }\n});",
              "err": {},
              "uuid": "02837b49-29a7-4648-8b3f-02507ea7b746",
              "parentUUID": "6c47679c-928b-4d72-b325-e32c0532c0fd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "24d3326d-c4bd-4655-9b40-88a70cd095b8",
            "f504dac5-6a32-4e92-a796-4ba540746066",
            "02837b49-29a7-4648-8b3f-02507ea7b746"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1980,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "42e821ca-3015-4714-b373-3dc0e1a06e7e",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\network_requests.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\network_requests.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "33cec08d-2d1c-40d9-85b9-996063fdd45d",
          "title": "Network Requests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.request() - make an XHR request",
              "fullTitle": "Network Requests cy.request() - make an XHR request",
              "timedOut": null,
              "duration": 984,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/request\ncy.request('https://jsonplaceholder.cypress.io/comments').should(response => {\n  expect(response.status).to.eq(200);\n  // the server sometimes gets an extra comment posted from another machine\n  // which gets returned as 1 extra object\n  expect(response.body).to.have.property('length').and.be.oneOf([500, 501]);\n  expect(response).to.have.property('headers');\n  expect(response).to.have.property('duration');\n});",
              "err": {},
              "uuid": "249c86fd-00fc-49c0-afd1-45463828583d",
              "parentUUID": "33cec08d-2d1c-40d9-85b9-996063fdd45d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - verify response using BDD syntax",
              "fullTitle": "Network Requests cy.request() - verify response using BDD syntax",
              "timedOut": null,
              "duration": 512,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('https://jsonplaceholder.cypress.io/comments').then(response => {\n  // https://on.cypress.io/assertions\n  expect(response).property('status').to.equal(200);\n  expect(response).property('body').to.have.property('length').and.be.oneOf([500, 501]);\n  expect(response).to.include.keys('headers', 'duration');\n});",
              "err": {},
              "uuid": "8ff9c162-07ce-43fc-b63f-7288701a0909",
              "parentUUID": "33cec08d-2d1c-40d9-85b9-996063fdd45d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() with query parameters",
              "fullTitle": "Network Requests cy.request() with query parameters",
              "timedOut": null,
              "duration": 442,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// will execute request\n// https://jsonplaceholder.cypress.io/comments?postId=1&id=3\ncy.request({\n  url: 'https://jsonplaceholder.cypress.io/comments',\n  qs: {\n    postId: 1,\n    id: 3\n  }\n}).its('body').should('be.an', 'array').and('have.length', 1).its('0') // yields first element of the array\n.should('contain', {\n  postId: 1,\n  id: 3\n});",
              "err": {},
              "uuid": "96c9fca9-e841-4336-bf28-e1f43e4483f5",
              "parentUUID": "33cec08d-2d1c-40d9-85b9-996063fdd45d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - pass result to the second request",
              "fullTitle": "Network Requests cy.request() - pass result to the second request",
              "timedOut": null,
              "duration": 941,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// first, let's find out the userId of the first user we have\ncy.request('https://jsonplaceholder.cypress.io/users?_limit=1').its('body') // yields the response object\n.its('0') // yields the first element of the returned list\n// the above two commands its('body').its('0')\n// can be written as its('body.0')\n// if you do not care about TypeScript checks\n.then(user => {\n  expect(user).property('id').to.be.a('number');\n  // make a new post on behalf of the user\n  cy.request('POST', 'https://jsonplaceholder.cypress.io/posts', {\n    userId: user.id,\n    title: 'Cypress Test Runner',\n    body: 'Fast, easy and reliable testing for anything that runs in a browser.'\n  });\n})\n// note that the value here is the returned value of the 2nd request\n// which is the new post object\n.then(response => {\n  expect(response).property('status').to.equal(201); // new entity created\n  expect(response).property('body').to.contain({\n    title: 'Cypress Test Runner'\n  });\n  // we don't know the exact post id - only that it will be > 100\n  // since JSONPlaceholder has built-in 100 posts\n  expect(response.body).property('id').to.be.a('number').and.to.be.gt(100);\n  // we don't know the user id here - since it was in above closure\n  // so in this test just confirm that the property is there\n  expect(response.body).property('userId').to.be.a('number');\n});",
              "err": {},
              "uuid": "47207012-1dea-4e18-a755-acabd632e829",
              "parentUUID": "33cec08d-2d1c-40d9-85b9-996063fdd45d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - save response in the shared test context",
              "fullTitle": "Network Requests cy.request() - save response in the shared test context",
              "timedOut": null,
              "duration": 722,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/variables-and-aliases\ncy.request('https://jsonplaceholder.cypress.io/users?_limit=1').its('body').its('0') // yields the first element of the returned list\n.as('user') // saves the object in the test context\n.then(function () {\n  // NOTE 👀\n  //  By the time this callback runs the \"as('user')\" command\n  //  has saved the user object in the test context.\n  //  To access the test context we need to use\n  //  the \"function () { ... }\" callback form,\n  //  otherwise \"this\" points at a wrong or undefined object!\n  cy.request('POST', 'https://jsonplaceholder.cypress.io/posts', {\n    userId: this.user.id,\n    title: 'Cypress Test Runner',\n    body: 'Fast, easy and reliable testing for anything that runs in a browser.'\n  }).its('body').as('post'); // save the new post from the response\n}).then(function () {\n  // When this callback runs, both \"cy.request\" API commands have finished\n  // and the test context has \"user\" and \"post\" objects set.\n  // Let's verify them.\n  expect(this.post, 'post has the right user id').property('userId').to.equal(this.user.id);\n});",
              "err": {},
              "uuid": "6489ac3c-36d5-48b0-b7d5-9f802dee8437",
              "parentUUID": "33cec08d-2d1c-40d9-85b9-996063fdd45d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.intercept() - route responses to matching requests",
              "fullTitle": "Network Requests cy.intercept() - route responses to matching requests",
              "timedOut": null,
              "duration": 1300,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/intercept\nlet message = 'whoa, this comment does not exist';\n// Listen to GET to comments/1\ncy.intercept('GET', '**/comments/*').as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click();\n// https://on.cypress.io/wait\ncy.wait('@getComment').its('response.statusCode').should('be.oneOf', [200, 304]);\n// Listen to POST to comments\ncy.intercept('POST', '**/comments').as('postComment');\n// we have code that posts a comment when\n// the button is clicked in scripts.js\ncy.get('.network-post').click();\ncy.wait('@postComment').should(({\n  request,\n  response\n}) => {\n  expect(request.body).to.include('email');\n  expect(request.headers).to.have.property('content-type');\n  expect(response && response.body).to.have.property('name', 'Using POST in cy.intercept()');\n});\n// Stub a response to PUT comments/ ****\ncy.intercept({\n  method: 'PUT',\n  url: '**/comments/*'\n}, {\n  statusCode: 404,\n  body: {\n    error: message\n  },\n  headers: {\n    'access-control-allow-origin': '*'\n  },\n  delayMs: 500\n}).as('putComment');\n// we have code that puts a comment when\n// the button is clicked in scripts.js\ncy.get('.network-put').click();\ncy.wait('@putComment');\n// our 404 statusCode logic in scripts.js executed\ncy.get('.network-put-comment').should('contain', message);",
              "err": {},
              "uuid": "59fd1d55-d82b-4312-9781-7404ebcc26af",
              "parentUUID": "33cec08d-2d1c-40d9-85b9-996063fdd45d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "249c86fd-00fc-49c0-afd1-45463828583d",
            "8ff9c162-07ce-43fc-b63f-7288701a0909",
            "96c9fca9-e841-4336-bf28-e1f43e4483f5",
            "47207012-1dea-4e18-a755-acabd632e829",
            "6489ac3c-36d5-48b0-b7d5-9f802dee8437",
            "59fd1d55-d82b-4312-9781-7404ebcc26af"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4901,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3bba0ad1-ebd0-46f1-b873-ee2f7b581f23",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\querying.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\querying.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c7437d43-b3c4-4c7b-bc7d-e03f304dfeaf",
          "title": "Querying",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.get() - query DOM elements",
              "fullTitle": "Querying cy.get() - query DOM elements",
              "timedOut": null,
              "duration": 327,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/get\ncy.get('#query-btn').should('contain', 'Button');\ncy.get('.query-btn').should('contain', 'Button');\ncy.get('#querying .well>button:first').should('contain', 'Button');\n//              ↲\n// Use CSS selectors just like jQuery\ncy.get('[data-test-id=\"test-example\"]').should('have.class', 'example');\n// 'cy.get()' yields jQuery object, you can get its attribute\n// by invoking `.attr()` method\ncy.get('[data-test-id=\"test-example\"]').invoke('attr', 'data-test-id').should('equal', 'test-example');\n// or you can get element's CSS property\ncy.get('[data-test-id=\"test-example\"]').invoke('css', 'position').should('equal', 'static');\n// or use assertions directly during 'cy.get()'\n// https://on.cypress.io/assertions\ncy.get('[data-test-id=\"test-example\"]').should('have.attr', 'data-test-id', 'test-example').and('have.css', 'position', 'static');",
              "err": {},
              "uuid": "5a4e86de-78f3-4aed-8c48-6c464c713fa7",
              "parentUUID": "c7437d43-b3c4-4c7b-bc7d-e03f304dfeaf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.contains() - query DOM elements with matching content",
              "fullTitle": "Querying cy.contains() - query DOM elements with matching content",
              "timedOut": null,
              "duration": 171,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/contains\ncy.get('.query-list').contains('bananas').should('have.class', 'third');\n// we can pass a regexp to `.contains()`\ncy.get('.query-list').contains(/^b\\w+/).should('have.class', 'third');\ncy.get('.query-list').contains('apples').should('have.class', 'first');\n// passing a selector to contains will\n// yield the selector containing the text\ncy.get('#querying').contains('ul', 'oranges').should('have.class', 'query-list');\ncy.get('.query-button').contains('Save Form').should('have.class', 'btn');",
              "err": {},
              "uuid": "8ae50803-e148-4817-9e05-d88f51e032c5",
              "parentUUID": "c7437d43-b3c4-4c7b-bc7d-e03f304dfeaf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".within() - query DOM elements within a specific element",
              "fullTitle": "Querying .within() - query DOM elements within a specific element",
              "timedOut": null,
              "duration": 167,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/within\ncy.get('.query-form').within(() => {\n  cy.get('input:first').should('have.attr', 'placeholder', 'Email');\n  cy.get('input:last').should('have.attr', 'placeholder', 'Password');\n});",
              "err": {},
              "uuid": "aef9ebad-d585-4ef4-bc59-0b04ab203406",
              "parentUUID": "c7437d43-b3c4-4c7b-bc7d-e03f304dfeaf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.root() - query the root DOM element",
              "fullTitle": "Querying cy.root() - query the root DOM element",
              "timedOut": null,
              "duration": 134,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/root\n// By default, root is the document\ncy.root().should('match', 'html');\ncy.get('.query-ul').within(() => {\n  // In this within, the root is now the ul DOM element\n  cy.root().should('have.class', 'query-ul');\n});",
              "err": {},
              "uuid": "755f24f4-75f7-4b72-ad2f-e24471972dab",
              "parentUUID": "c7437d43-b3c4-4c7b-bc7d-e03f304dfeaf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "best practices - selecting elements",
              "fullTitle": "Querying best practices - selecting elements",
              "timedOut": null,
              "duration": 688,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/best-practices#Selecting-Elements\ncy.get('[data-cy=best-practices-selecting-elements]').within(() => {\n  // Worst - too generic, no context\n  cy.get('button').click();\n  // Bad. Coupled to styling. Highly subject to change.\n  cy.get('.btn.btn-large').click();\n  // Average. Coupled to the `name` attribute which has HTML semantics.\n  cy.get('[name=submission]').click();\n  // Better. But still coupled to styling or JS event listeners.\n  cy.get('#main').click();\n  // Slightly better. Uses an ID but also ensures the element\n  // has an ARIA role attribute\n  cy.get('#main[role=button]').click();\n  // Much better. But still coupled to text content that may change.\n  cy.contains('Submit').click();\n  // Best. Insulated from all changes.\n  cy.get('[data-cy=submit]').click();\n});",
              "err": {},
              "uuid": "6ba724b4-c44f-45b0-be02-8caf90704632",
              "parentUUID": "c7437d43-b3c4-4c7b-bc7d-e03f304dfeaf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5a4e86de-78f3-4aed-8c48-6c464c713fa7",
            "8ae50803-e148-4817-9e05-d88f51e032c5",
            "aef9ebad-d585-4ef4-bc59-0b04ab203406",
            "755f24f4-75f7-4b72-ad2f-e24471972dab",
            "6ba724b4-c44f-45b0-be02-8caf90704632"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1487,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "8b0353e7-bd54-4f95-abcc-3b82648c504c",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\spies_stubs_clocks.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\spies_stubs_clocks.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b3999649-34eb-456a-9299-9c276e7411b2",
          "title": "Spies, Stubs, and Clock",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.spy() - wrap a method in a spy",
              "fullTitle": "Spies, Stubs, and Clock cy.spy() - wrap a method in a spy",
              "timedOut": null,
              "duration": 264,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/spy\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\nconst obj = {\n  foo() {}\n};\nconst spy = cy.spy(obj, 'foo').as('anyArgs');\nobj.foo();\nexpect(spy).to.be.called;",
              "err": {},
              "uuid": "aaa3696f-811f-4726-b69d-55f5d519a7f8",
              "parentUUID": "b3999649-34eb-456a-9299-9c276e7411b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.spy() retries until assertions pass",
              "fullTitle": "Spies, Stubs, and Clock cy.spy() retries until assertions pass",
              "timedOut": null,
              "duration": 2534,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\nconst obj = {\n  /**\n   * Prints the argument passed\n   * @param x {any}\n  */\n  foo(x) {\n    console.log('obj.foo called with', x);\n  }\n};\ncy.spy(obj, 'foo').as('foo');\nsetTimeout(() => {\n  obj.foo('first');\n}, 500);\nsetTimeout(() => {\n  obj.foo('second');\n}, 2500);\ncy.get('@foo').should('have.been.calledTwice');",
              "err": {},
              "uuid": "20261b4c-98e6-4c75-95bf-385172f29c22",
              "parentUUID": "b3999649-34eb-456a-9299-9c276e7411b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.stub() - create a stub and/or replace a function with stub",
              "fullTitle": "Spies, Stubs, and Clock cy.stub() - create a stub and/or replace a function with stub",
              "timedOut": null,
              "duration": 109,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/stub\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\nconst obj = {\n  /**\n   * prints both arguments to the console\n   * @param a {string}\n   * @param b {string}\n  */\n  foo(a, b) {\n    console.log('a', a, 'b', b);\n  }\n};\nconst stub = cy.stub(obj, 'foo').as('foo');\nobj.foo('foo', 'bar');\nexpect(stub).to.be.called;",
              "err": {},
              "uuid": "d1259979-66fd-46cd-af90-639c451b916c",
              "parentUUID": "b3999649-34eb-456a-9299-9c276e7411b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clock() - control time in the browser",
              "fullTitle": "Spies, Stubs, and Clock cy.clock() - control time in the browser",
              "timedOut": null,
              "duration": 230,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clock\n// create the date in UTC so it's always the same\n// no matter what local timezone the browser is running in\nconst now = new Date(Date.UTC(2017, 2, 14)).getTime();\ncy.clock(now);\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\ncy.get('#clock-div').click();\ncy.get('#clock-div').should('have.text', '1489449600');",
              "err": {},
              "uuid": "b694c427-418a-4aa6-8416-5fc426dfc541",
              "parentUUID": "b3999649-34eb-456a-9299-9c276e7411b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.tick() - move time in the browser",
              "fullTitle": "Spies, Stubs, and Clock cy.tick() - move time in the browser",
              "timedOut": null,
              "duration": 295,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/tick\n// create the date in UTC so it's always the same\n// no matter what local timezone the browser is running in\nconst now = new Date(Date.UTC(2017, 2, 14)).getTime();\ncy.clock(now);\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\ncy.get('#tick-div').click();\ncy.get('#tick-div').should('have.text', '1489449600');\ncy.tick(10000); // 10 seconds passed\ncy.get('#tick-div').click();\ncy.get('#tick-div').should('have.text', '1489449610');",
              "err": {},
              "uuid": "1ccc00bd-1056-4e7e-baef-b52f9bce21a5",
              "parentUUID": "b3999649-34eb-456a-9299-9c276e7411b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.stub() matches depending on arguments",
              "fullTitle": "Spies, Stubs, and Clock cy.stub() matches depending on arguments",
              "timedOut": null,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// see all possible matchers at\n// https://sinonjs.org/releases/latest/matchers/\nconst greeter = {\n  /**\n   * Greets a person\n   * @param {string} name\n  */\n  greet(name) {\n    return `Hello, ${name}!`;\n  }\n};\ncy.stub(greeter, 'greet').callThrough() // if you want non-matched calls to call the real method\n.withArgs(Cypress.sinon.match.string).returns('Hi').withArgs(Cypress.sinon.match.number).throws(new Error('Invalid name'));\nexpect(greeter.greet('World')).to.equal('Hi');\nexpect(() => greeter.greet(42)).to.throw('Invalid name');\nexpect(greeter.greet).to.have.been.calledTwice;\n// non-matched calls goes the actual method\nexpect(greeter.greet()).to.equal('Hello, undefined!');",
              "err": {},
              "uuid": "9fecba1b-c6f1-48a8-821b-4cbeb23a19c9",
              "parentUUID": "b3999649-34eb-456a-9299-9c276e7411b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "matches call arguments using Sinon matchers",
              "fullTitle": "Spies, Stubs, and Clock matches call arguments using Sinon matchers",
              "timedOut": null,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// see all possible matchers at\n// https://sinonjs.org/releases/latest/matchers/\nconst calculator = {\n  /**\n   * returns the sum of two arguments\n   * @param a {number}\n   * @param b {number}\n  */\n  add(a, b) {\n    return a + b;\n  }\n};\nconst spy = cy.spy(calculator, 'add').as('add');\nexpect(calculator.add(2, 3)).to.equal(5);\n// if we want to assert the exact values used during the call\nexpect(spy).to.be.calledWith(2, 3);\n// let's confirm \"add\" method was called with two numbers\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match.number);\n// alternatively, provide the value to match\nexpect(spy).to.be.calledWith(Cypress.sinon.match(2), Cypress.sinon.match(3));\n// match any value\nexpect(spy).to.be.calledWith(Cypress.sinon.match.any, 3);\n// match any value from a list\nexpect(spy).to.be.calledWith(Cypress.sinon.match.in([1, 2, 3]), 3);\n/**\n * Returns true if the given number is even\n * @param {number} x\n */\nconst isEven = x => x % 2 === 0;\n// expect the value to pass a custom predicate function\n// the second argument to \"sinon.match(predicate, message)\" is\n// shown if the predicate does not pass and assertion fails\nexpect(spy).to.be.calledWith(Cypress.sinon.match(isEven, 'isEven'), 3);\n/**\n * Returns a function that checks if a given number is larger than the limit\n * @param {number} limit\n * @returns {(x: number) => boolean}\n */\nconst isGreaterThan = limit => x => x > limit;\n/**\n * Returns a function that checks if a given number is less than the limit\n * @param {number} limit\n * @returns {(x: number) => boolean}\n */\nconst isLessThan = limit => x => x < limit;\n// you can combine several matchers using \"and\", \"or\"\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match(isGreaterThan(2), '> 2').and(Cypress.sinon.match(isLessThan(4), '< 4')));\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match(isGreaterThan(200), '> 200').or(Cypress.sinon.match(3)));\n// matchers can be used from BDD assertions\ncy.get('@add').should('have.been.calledWith', Cypress.sinon.match.number, Cypress.sinon.match(3));\n// you can alias matchers for shorter test code\nconst {\n  match: M\n} = Cypress.sinon;\ncy.get('@add').should('have.been.calledWith', M.number, M(3));",
              "err": {},
              "uuid": "b50457dc-13ba-4231-870c-63228578f5d3",
              "parentUUID": "b3999649-34eb-456a-9299-9c276e7411b2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aaa3696f-811f-4726-b69d-55f5d519a7f8",
            "20261b4c-98e6-4c75-95bf-385172f29c22",
            "d1259979-66fd-46cd-af90-639c451b916c",
            "b694c427-418a-4aa6-8416-5fc426dfc541",
            "1ccc00bd-1056-4e7e-baef-b52f9bce21a5",
            "9fecba1b-c6f1-48a8-821b-4cbeb23a19c9",
            "b50457dc-13ba-4231-870c-63228578f5d3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3491,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "933d19f6-f357-4da8-ba4a-2be7c46f743c",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\storage.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\storage.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c520e1bd-0006-4847-b5eb-787c8fcf795c",
          "title": "Local Storage / Session Storage",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.clearLocalStorage() - clear all data in localStorage for the current origin",
              "fullTitle": "Local Storage / Session Storage cy.clearLocalStorage() - clear all data in localStorage for the current origin",
              "timedOut": null,
              "duration": 581,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearlocalstorage\ncy.get('.ls-btn').click();\ncy.get('.ls-btn').should(() => {\n  expect(localStorage.getItem('prop1')).to.eq('red');\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n});\ncy.clearLocalStorage();\ncy.getAllLocalStorage().should(() => {\n  expect(localStorage.getItem('prop1')).to.be.null;\n  expect(localStorage.getItem('prop2')).to.be.null;\n  expect(localStorage.getItem('prop3')).to.be.null;\n});\ncy.get('.ls-btn').click();\ncy.get('.ls-btn').should(() => {\n  expect(localStorage.getItem('prop1')).to.eq('red');\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n});\n// Clear key matching string in localStorage\ncy.clearLocalStorage('prop1');\ncy.getAllLocalStorage().should(() => {\n  expect(localStorage.getItem('prop1')).to.be.null;\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n});\ncy.get('.ls-btn').click();\ncy.get('.ls-btn').should(() => {\n  expect(localStorage.getItem('prop1')).to.eq('red');\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n});\n// Clear keys matching regex in localStorage\ncy.clearLocalStorage(/prop1|2/);\ncy.getAllLocalStorage().should(() => {\n  expect(localStorage.getItem('prop1')).to.be.null;\n  expect(localStorage.getItem('prop2')).to.be.null;\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n});",
              "err": {},
              "uuid": "221d856e-e4d1-4cf1-9243-6d6ce07fbfde",
              "parentUUID": "c520e1bd-0006-4847-b5eb-787c8fcf795c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getAllLocalStorage() - get all data in localStorage for all origins",
              "fullTitle": "Local Storage / Session Storage cy.getAllLocalStorage() - get all data in localStorage for all origins",
              "timedOut": null,
              "duration": 199,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getalllocalstorage\ncy.get('.ls-btn').click();\n// getAllLocalStorage() yields a map of origins to localStorage values\ncy.getAllLocalStorage().should(storageMap => {\n  expect(storageMap).to.deep.equal({\n    // other origins will also be present if localStorage is set on them\n    'https://example.cypress.io': {\n      prop1: 'red',\n      prop2: 'blue',\n      prop3: 'magenta'\n    }\n  });\n});",
              "err": {},
              "uuid": "d79b3f30-c6e5-4cd5-a0aa-afe611dd9166",
              "parentUUID": "c520e1bd-0006-4847-b5eb-787c8fcf795c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearAllLocalStorage() - clear all data in localStorage for all origins",
              "fullTitle": "Local Storage / Session Storage cy.clearAllLocalStorage() - clear all data in localStorage for all origins",
              "timedOut": null,
              "duration": 202,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearalllocalstorage\ncy.get('.ls-btn').click();\n// clearAllLocalStorage() yields null\ncy.clearAllLocalStorage();\ncy.getAllLocalStorage().should(() => {\n  expect(localStorage.getItem('prop1')).to.be.null;\n  expect(localStorage.getItem('prop2')).to.be.null;\n  expect(localStorage.getItem('prop3')).to.be.null;\n});",
              "err": {},
              "uuid": "c9a8229b-2c5b-46b7-979a-c56218bc52e0",
              "parentUUID": "c520e1bd-0006-4847-b5eb-787c8fcf795c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getAllSessionStorage() - get all data in sessionStorage for all origins",
              "fullTitle": "Local Storage / Session Storage cy.getAllSessionStorage() - get all data in sessionStorage for all origins",
              "timedOut": null,
              "duration": 188,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getallsessionstorage\ncy.get('.ls-btn').click();\n// getAllSessionStorage() yields a map of origins to sessionStorage values\ncy.getAllSessionStorage().should(storageMap => {\n  expect(storageMap).to.deep.equal({\n    // other origins will also be present if sessionStorage is set on them\n    'https://example.cypress.io': {\n      prop4: 'cyan',\n      prop5: 'yellow',\n      prop6: 'black'\n    }\n  });\n});",
              "err": {},
              "uuid": "0fe6d873-9226-4a4b-bcaa-104dd70b4c0f",
              "parentUUID": "c520e1bd-0006-4847-b5eb-787c8fcf795c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearAllSessionStorage() - clear all data in sessionStorage for all origins",
              "fullTitle": "Local Storage / Session Storage cy.clearAllSessionStorage() - clear all data in sessionStorage for all origins",
              "timedOut": null,
              "duration": 184,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearallsessionstorage\ncy.get('.ls-btn').click();\n// clearAllSessionStorage() yields null\ncy.clearAllSessionStorage();\ncy.getAllSessionStorage().should(() => {\n  expect(sessionStorage.getItem('prop4')).to.be.null;\n  expect(sessionStorage.getItem('prop5')).to.be.null;\n  expect(sessionStorage.getItem('prop6')).to.be.null;\n});",
              "err": {},
              "uuid": "60544222-bbe1-40bb-9a1a-3bcaedae43c5",
              "parentUUID": "c520e1bd-0006-4847-b5eb-787c8fcf795c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "221d856e-e4d1-4cf1-9243-6d6ce07fbfde",
            "d79b3f30-c6e5-4cd5-a0aa-afe611dd9166",
            "c9a8229b-2c5b-46b7-979a-c56218bc52e0",
            "0fe6d873-9226-4a4b-bcaa-104dd70b4c0f",
            "60544222-bbe1-40bb-9a1a-3bcaedae43c5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1354,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "30b5b62a-66be-4155-ba1b-85f1a4495628",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\traversal.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\traversal.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "652554f3-9c02-4e4e-b16a-541d22125b36",
          "title": "Traversal",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".children() - get child DOM elements",
              "fullTitle": "Traversal .children() - get child DOM elements",
              "timedOut": null,
              "duration": 276,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/children\ncy.get('.traversal-breadcrumb').children('.active').should('contain', 'Data');",
              "err": {},
              "uuid": "292330b0-3353-44e3-898e-92ea124fbc08",
              "parentUUID": "652554f3-9c02-4e4e-b16a-541d22125b36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".closest() - get closest ancestor DOM element",
              "fullTitle": "Traversal .closest() - get closest ancestor DOM element",
              "timedOut": null,
              "duration": 137,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/closest\ncy.get('.traversal-badge').closest('ul').should('have.class', 'list-group');",
              "err": {},
              "uuid": "a3330ad5-cb04-4527-8f51-a9055d8ef9fc",
              "parentUUID": "652554f3-9c02-4e4e-b16a-541d22125b36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".eq() - get a DOM element at a specific index",
              "fullTitle": "Traversal .eq() - get a DOM element at a specific index",
              "timedOut": null,
              "duration": 127,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/eq\ncy.get('.traversal-list>li').eq(1).should('contain', 'siamese');",
              "err": {},
              "uuid": "e7af72ef-774c-4fd6-a93b-669af3d8f13c",
              "parentUUID": "652554f3-9c02-4e4e-b16a-541d22125b36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".filter() - get DOM elements that match the selector",
              "fullTitle": "Traversal .filter() - get DOM elements that match the selector",
              "timedOut": null,
              "duration": 134,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/filter\ncy.get('.traversal-nav>li').filter('.active').should('contain', 'About');",
              "err": {},
              "uuid": "519f3989-df66-4e32-ab3d-ec4fbd150fa1",
              "parentUUID": "652554f3-9c02-4e4e-b16a-541d22125b36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".find() - get descendant DOM elements of the selector",
              "fullTitle": "Traversal .find() - get descendant DOM elements of the selector",
              "timedOut": null,
              "duration": 213,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/find\ncy.get('.traversal-pagination').find('li').find('a').should('have.length', 7);",
              "err": {},
              "uuid": "f0752bfa-4dfa-4ff2-84d5-a5eeeff4a505",
              "parentUUID": "652554f3-9c02-4e4e-b16a-541d22125b36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".first() - get first DOM element",
              "fullTitle": "Traversal .first() - get first DOM element",
              "timedOut": null,
              "duration": 138,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/first\ncy.get('.traversal-table td').first().should('contain', '1');",
              "err": {},
              "uuid": "31216b19-2f74-4114-aa0d-52808b9498ca",
              "parentUUID": "652554f3-9c02-4e4e-b16a-541d22125b36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".last() - get last DOM element",
              "fullTitle": "Traversal .last() - get last DOM element",
              "timedOut": null,
              "duration": 113,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/last\ncy.get('.traversal-buttons .btn').last().should('contain', 'Submit');",
              "err": {},
              "uuid": "cc200198-cfc3-410f-afc8-8d3914f8d073",
              "parentUUID": "652554f3-9c02-4e4e-b16a-541d22125b36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".next() - get next sibling DOM element",
              "fullTitle": "Traversal .next() - get next sibling DOM element",
              "timedOut": null,
              "duration": 127,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/next\ncy.get('.traversal-ul').contains('apples').next().should('contain', 'oranges');",
              "err": {},
              "uuid": "ad6daea5-079b-4d84-bba2-f3ddd83ec242",
              "parentUUID": "652554f3-9c02-4e4e-b16a-541d22125b36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".nextAll() - get all next sibling DOM elements",
              "fullTitle": "Traversal .nextAll() - get all next sibling DOM elements",
              "timedOut": null,
              "duration": 145,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/nextall\ncy.get('.traversal-next-all').contains('oranges').nextAll().should('have.length', 3);",
              "err": {},
              "uuid": "5204205b-6640-4fe6-8f2d-f45f4071101c",
              "parentUUID": "652554f3-9c02-4e4e-b16a-541d22125b36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".nextUntil() - get next sibling DOM elements until next el",
              "fullTitle": "Traversal .nextUntil() - get next sibling DOM elements until next el",
              "timedOut": null,
              "duration": 152,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/nextuntil\ncy.get('#veggies').nextUntil('#nuts').should('have.length', 3);",
              "err": {},
              "uuid": "dd621c6b-8577-4062-ab13-a0075ba91dcd",
              "parentUUID": "652554f3-9c02-4e4e-b16a-541d22125b36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".not() - remove DOM elements from set of DOM elements",
              "fullTitle": "Traversal .not() - remove DOM elements from set of DOM elements",
              "timedOut": null,
              "duration": 151,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/not\ncy.get('.traversal-disabled .btn').not('[disabled]').should('not.contain', 'Disabled');",
              "err": {},
              "uuid": "80bc5300-5327-4ac7-8fa1-ca3dc6487b2b",
              "parentUUID": "652554f3-9c02-4e4e-b16a-541d22125b36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".parent() - get parent DOM element from DOM elements",
              "fullTitle": "Traversal .parent() - get parent DOM element from DOM elements",
              "timedOut": null,
              "duration": 136,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/parent\ncy.get('.traversal-mark').parent().should('contain', 'Morbi leo risus');",
              "err": {},
              "uuid": "29ff6964-f69e-43eb-8f03-0887e1f377a3",
              "parentUUID": "652554f3-9c02-4e4e-b16a-541d22125b36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".parents() - get parent DOM elements from DOM elements",
              "fullTitle": "Traversal .parents() - get parent DOM elements from DOM elements",
              "timedOut": null,
              "duration": 101,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/parents\ncy.get('.traversal-cite').parents().should('match', 'blockquote');",
              "err": {},
              "uuid": "484d935f-9832-421a-bf8c-3b332b857171",
              "parentUUID": "652554f3-9c02-4e4e-b16a-541d22125b36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".parentsUntil() - get parent DOM elements from DOM elements until el",
              "fullTitle": "Traversal .parentsUntil() - get parent DOM elements from DOM elements until el",
              "timedOut": null,
              "duration": 105,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/parentsuntil\ncy.get('.clothes-nav').find('.active').parentsUntil('.clothes-nav').should('have.length', 2);",
              "err": {},
              "uuid": "0ab13a09-36b3-4995-a364-91ce9bea4892",
              "parentUUID": "652554f3-9c02-4e4e-b16a-541d22125b36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".prev() - get previous sibling DOM element",
              "fullTitle": "Traversal .prev() - get previous sibling DOM element",
              "timedOut": null,
              "duration": 96,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/prev\ncy.get('.birds').find('.active').prev().should('contain', 'Lorikeets');",
              "err": {},
              "uuid": "c0f0d9dc-aadf-495e-a519-e2f7a2e42da8",
              "parentUUID": "652554f3-9c02-4e4e-b16a-541d22125b36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".prevAll() - get all previous sibling DOM elements",
              "fullTitle": "Traversal .prevAll() - get all previous sibling DOM elements",
              "timedOut": null,
              "duration": 122,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/prevall\ncy.get('.fruits-list').find('.third').prevAll().should('have.length', 2);",
              "err": {},
              "uuid": "6fe4c27f-6d17-4370-ad1f-98adb4adb7c7",
              "parentUUID": "652554f3-9c02-4e4e-b16a-541d22125b36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".prevUntil() - get all previous sibling DOM elements until el",
              "fullTitle": "Traversal .prevUntil() - get all previous sibling DOM elements until el",
              "timedOut": null,
              "duration": 98,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/prevuntil\ncy.get('.foods-list').find('#nuts').prevUntil('#veggies').should('have.length', 3);",
              "err": {},
              "uuid": "67ac5923-6017-46f4-a138-963b6f4dc816",
              "parentUUID": "652554f3-9c02-4e4e-b16a-541d22125b36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".siblings() - get all sibling DOM elements",
              "fullTitle": "Traversal .siblings() - get all sibling DOM elements",
              "timedOut": null,
              "duration": 115,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/siblings\ncy.get('.traversal-pills .active').siblings().should('have.length', 2);",
              "err": {},
              "uuid": "f71dccb3-010a-4954-821e-db3fe145373b",
              "parentUUID": "652554f3-9c02-4e4e-b16a-541d22125b36",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "292330b0-3353-44e3-898e-92ea124fbc08",
            "a3330ad5-cb04-4527-8f51-a9055d8ef9fc",
            "e7af72ef-774c-4fd6-a93b-669af3d8f13c",
            "519f3989-df66-4e32-ab3d-ec4fbd150fa1",
            "f0752bfa-4dfa-4ff2-84d5-a5eeeff4a505",
            "31216b19-2f74-4114-aa0d-52808b9498ca",
            "cc200198-cfc3-410f-afc8-8d3914f8d073",
            "ad6daea5-079b-4d84-bba2-f3ddd83ec242",
            "5204205b-6640-4fe6-8f2d-f45f4071101c",
            "dd621c6b-8577-4062-ab13-a0075ba91dcd",
            "80bc5300-5327-4ac7-8fa1-ca3dc6487b2b",
            "29ff6964-f69e-43eb-8f03-0887e1f377a3",
            "484d935f-9832-421a-bf8c-3b332b857171",
            "0ab13a09-36b3-4995-a364-91ce9bea4892",
            "c0f0d9dc-aadf-495e-a519-e2f7a2e42da8",
            "6fe4c27f-6d17-4370-ad1f-98adb4adb7c7",
            "67ac5923-6017-46f4-a138-963b6f4dc816",
            "f71dccb3-010a-4954-821e-db3fe145373b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2486,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "26ea5ffb-a0fd-4409-9b04-64d02e265738",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\utilities.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\utilities.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8e033b34-56a9-4870-b062-2523b578dd8d",
          "title": "Utilities",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cypress._ - call a lodash method",
              "fullTitle": "Utilities Cypress._ - call a lodash method",
              "timedOut": null,
              "duration": 580,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/_\ncy.request('https://jsonplaceholder.cypress.io/users').then(response => {\n  let ids = Cypress._.chain(response.body).map('id').take(3).value();\n  expect(ids).to.deep.eq([1, 2, 3]);\n});",
              "err": {},
              "uuid": "fe115810-dcc3-45f2-b775-a653f8b2a4fd",
              "parentUUID": "8e033b34-56a9-4870-b062-2523b578dd8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.$ - call a jQuery method",
              "fullTitle": "Utilities Cypress.$ - call a jQuery method",
              "timedOut": null,
              "duration": 203,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/$\nlet $li = Cypress.$('.utility-jquery li:first');\ncy.wrap($li).should('not.have.class', 'active');\ncy.wrap($li).click();\ncy.wrap($li).should('have.class', 'active');",
              "err": {},
              "uuid": "804caf9e-7a44-4f37-a604-33ec84707f29",
              "parentUUID": "8e033b34-56a9-4870-b062-2523b578dd8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.Blob - blob utilities and base64 string conversion",
              "fullTitle": "Utilities Cypress.Blob - blob utilities and base64 string conversion",
              "timedOut": null,
              "duration": 499,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/blob\ncy.get('.utility-blob').then($div => {\n  // https://github.com/nolanlawson/blob-util#imgSrcToDataURL\n  // get the dataUrl string for the javascript-logo\n  return Cypress.Blob.imgSrcToDataURL('https://example.cypress.io/assets/img/javascript-logo.png', undefined, 'anonymous').then(dataUrl => {\n    // create an <img> element and set its src to the dataUrl\n    let img = Cypress.$('<img />', {\n      src: dataUrl\n    });\n    // need to explicitly return cy here since we are initially returning\n    // the Cypress.Blob.imgSrcToDataURL promise to our test\n    // append the image\n    $div.append(img);\n    cy.get('.utility-blob img').click();\n    cy.get('.utility-blob img').should('have.attr', 'src', dataUrl);\n  });\n});",
              "err": {},
              "uuid": "04867016-045a-46d2-80a1-5d98bc7a4a5b",
              "parentUUID": "8e033b34-56a9-4870-b062-2523b578dd8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.minimatch - test out glob patterns against strings",
              "fullTitle": "Utilities Cypress.minimatch - test out glob patterns against strings",
              "timedOut": null,
              "duration": 112,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/minimatch\nlet matching = Cypress.minimatch('/users/1/comments', '/users/*/comments', {\n  matchBase: true\n});\nexpect(matching, 'matching wildcard').to.be.true;\nmatching = Cypress.minimatch('/users/1/comments/2', '/users/*/comments', {\n  matchBase: true\n});\nexpect(matching, 'comments').to.be.false;\n// ** matches against all downstream path segments\nmatching = Cypress.minimatch('/foo/bar/baz/123/quux?a=b&c=2', '/foo/**', {\n  matchBase: true\n});\nexpect(matching, 'comments').to.be.true;\n// whereas * matches only the next path segment\nmatching = Cypress.minimatch('/foo/bar/baz/123/quux?a=b&c=2', '/foo/*', {\n  matchBase: false\n});\nexpect(matching, 'comments').to.be.false;",
              "err": {},
              "uuid": "cd326ae6-9acd-4263-89ff-fcef901fd5e2",
              "parentUUID": "8e033b34-56a9-4870-b062-2523b578dd8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.Promise - instantiate a bluebird promise",
              "fullTitle": "Utilities Cypress.Promise - instantiate a bluebird promise",
              "timedOut": null,
              "duration": 1125,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/promise\nlet waited = false;\n/**\n * @return Bluebird<string>\n */\nfunction waitOneSecond() {\n  // return a promise that resolves after 1 second\n  return new Cypress.Promise((resolve, reject) => {\n    setTimeout(() => {\n      // set waited to true\n      waited = true;\n      // resolve with 'foo' string\n      resolve('foo');\n    }, 1000);\n  });\n}\ncy.then(() => {\n  // return a promise to cy.then() that\n  // is awaited until it resolves\n  return waitOneSecond().then(str => {\n    expect(str).to.eq('foo');\n    expect(waited).to.be.true;\n  });\n});",
              "err": {},
              "uuid": "d9af98a1-2e88-4505-afac-1bd192f30ecb",
              "parentUUID": "8e033b34-56a9-4870-b062-2523b578dd8d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fe115810-dcc3-45f2-b775-a653f8b2a4fd",
            "804caf9e-7a44-4f37-a604-33ec84707f29",
            "04867016-045a-46d2-80a1-5d98bc7a4a5b",
            "cd326ae6-9acd-4263-89ff-fcef901fd5e2",
            "d9af98a1-2e88-4505-afac-1bd192f30ecb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2519,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "f0af9c56-a445-4575-8acd-6e3a5ffb26c1",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\viewport.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\viewport.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "377056da-e9b0-4896-8215-03b848130857",
          "title": "Viewport",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.viewport() - set the viewport size and dimension",
              "fullTitle": "Viewport cy.viewport() - set the viewport size and dimension",
              "timedOut": null,
              "duration": 2888,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/viewport\ncy.get('#navbar').should('be.visible');\ncy.viewport(320, 480);\n// the navbar should have collapse since our screen is smaller\ncy.get('#navbar').should('not.be.visible');\ncy.get('.navbar-toggle').should('be.visible').click();\ncy.get('.nav').find('a').should('be.visible');\n// lets see what our app looks like on a super large screen\ncy.viewport(2999, 2999);\n// cy.viewport() accepts a set of preset sizes\n// to easily set the screen to a device's width and height\n// We added a cy.wait() between each viewport change so you can see\n// the change otherwise it is a little too fast to see :)\ncy.viewport('macbook-15');\ncy.wait(200);\ncy.viewport('macbook-13');\ncy.wait(200);\ncy.viewport('macbook-11');\ncy.wait(200);\ncy.viewport('ipad-2');\ncy.wait(200);\ncy.viewport('ipad-mini');\ncy.wait(200);\ncy.viewport('iphone-6+');\ncy.wait(200);\ncy.viewport('iphone-6');\ncy.wait(200);\ncy.viewport('iphone-5');\ncy.wait(200);\ncy.viewport('iphone-4');\ncy.wait(200);\ncy.viewport('iphone-3');\ncy.wait(200);\n// cy.viewport() accepts an orientation for all presets\n// the default orientation is 'portrait'\ncy.viewport('ipad-2', 'portrait');\ncy.wait(200);\ncy.viewport('iphone-4', 'landscape');\ncy.wait(200);\n// The viewport will be reset back to the default dimensions\n// in between tests (the  default can be set in cypress.config.{js|ts})",
              "err": {},
              "uuid": "1828cd23-c62a-467f-9f52-54dde6321cb2",
              "parentUUID": "377056da-e9b0-4896-8215-03b848130857",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1828cd23-c62a-467f-9f52-54dde6321cb2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2888,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "df6da34c-b904-4c25-8bcb-6f240c9b16e1",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\waiting.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\waiting.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f69d2f28-a91b-4df8-ac44-f41143b81ea7",
          "title": "Waiting",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.wait() - wait for a specific amount of time",
              "fullTitle": "Waiting cy.wait() - wait for a specific amount of time",
              "timedOut": null,
              "duration": 4510,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.wait-input1').type('Wait 1000ms after typing');\ncy.wait(1000);\ncy.get('.wait-input2').type('Wait 1000ms after typing');\ncy.wait(1000);\ncy.get('.wait-input3').type('Wait 1000ms after typing');\ncy.wait(1000);",
              "err": {},
              "uuid": "fb15dfd1-5af8-477b-ba41-a009b389e48b",
              "parentUUID": "f69d2f28-a91b-4df8-ac44-f41143b81ea7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.wait() - wait for a specific route",
              "fullTitle": "Waiting cy.wait() - wait for a specific route",
              "timedOut": null,
              "duration": 465,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Listen to GET to comments/1\ncy.intercept('GET', '**/comments/*').as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click();\n// wait for GET comments/1\ncy.wait('@getComment').its('response.statusCode').should('be.oneOf', [200, 304]);",
              "err": {},
              "uuid": "713a1af6-6a6c-4b3e-a704-64a1bebb3b7a",
              "parentUUID": "f69d2f28-a91b-4df8-ac44-f41143b81ea7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fb15dfd1-5af8-477b-ba41-a009b389e48b",
            "713a1af6-6a6c-4b3e-a704-64a1bebb3b7a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4975,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "10f23a9f-3f9f-445a-87be-bb6c40c30166",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\window.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\window.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b4cac288-72d2-4fff-a2f3-2b07c8246b09",
          "title": "Window",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.window() - get the global window object",
              "fullTitle": "Window cy.window() - get the global window object",
              "timedOut": null,
              "duration": 200,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/window\ncy.window().should('have.property', 'top');",
              "err": {},
              "uuid": "32e54d19-36e4-4532-88b0-1a42f0ea43ba",
              "parentUUID": "b4cac288-72d2-4fff-a2f3-2b07c8246b09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.document() - get the document object",
              "fullTitle": "Window cy.document() - get the document object",
              "timedOut": null,
              "duration": 96,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/document\ncy.document().should('have.property', 'charset').and('eq', 'UTF-8');",
              "err": {},
              "uuid": "0a665090-6a99-41cb-a783-41dc2be64c6a",
              "parentUUID": "b4cac288-72d2-4fff-a2f3-2b07c8246b09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.title() - get the title",
              "fullTitle": "Window cy.title() - get the title",
              "timedOut": null,
              "duration": 92,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/title\ncy.title().should('include', 'Kitchen Sink');",
              "err": {},
              "uuid": "e82323aa-af00-44a4-b3a7-ceaa15e1636f",
              "parentUUID": "b4cac288-72d2-4fff-a2f3-2b07c8246b09",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "32e54d19-36e4-4532-88b0-1a42f0ea43ba",
            "0a665090-6a99-41cb-a783-41dc2be64c6a",
            "e82323aa-af00-44a4-b3a7-ceaa15e1636f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 388,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}