{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-13T04:00:40.231Z",
    "end": "2025-08-13T04:00:46.889Z",
    "duration": 6658,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8ccb3da3-35f4-4339-94d7-30a43f7265a2",
      "title": "",
      "fullFile": "cypress\\e2e\\dynamicHTMLTable_7.cy.js",
      "file": "cypress\\e2e\\dynamicHTMLTable_7.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ac6b0180-bd14-4795-9d79-c500fd4553a2",
          "title": "Log browser name and CPU usage on dynamic-table",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Logs browser and CPU usage",
              "fullTitle": "Log browser name and CPU usage on dynamic-table Logs browser and CPU usage",
              "timedOut": null,
              "duration": 3818,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://practice.expandtesting.com/dynamic-table');\ncy.get('table.table-striped tbody tr').each(($row, index) => {\n  const browserName = $row.find('td').eq(0).text();\n  const cpuUsage = $row.find('td').eq(2).text();\n  cy.get('table.table-striped tbody tr').should('have.length.at.least', 1);\n  cy.log(`Row ${index + 1}: Browser = ${browserName}, CPU Usage = ${cpuUsage}`);\n  expect(browserName).to.not.be.empty;\n  expect(cpuUsage).to.not.be.empty;\n});",
              "err": {},
              "uuid": "6adf498d-0ef5-4b20-ba4a-c0f8f5bf0a60",
              "parentUUID": "ac6b0180-bd14-4795-9d79-c500fd4553a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Assert No cell is empty and Verify at least one browser has CPU usage above 15%",
              "fullTitle": "Log browser name and CPU usage on dynamic-table Assert No cell is empty and Verify at least one browser has CPU usage above 15%",
              "timedOut": null,
              "duration": 2318,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://practice.expandtesting.com/dynamic-table');\nlet cpuAbove15Found = false;\ncy.get(\"table.table-striped tbody tr\").each(($row, rowIndex, $rows) => {\n  const $cells = $row.find('td');\n  const browserName = $cells.eq(0).text().trim(); // 1. Assert browser name is not empty\n  expect(browserName).to.not.be.empty;\n  $cells.each((i, td) => {\n    const cellText = td.innerText;\n    expect(cellText).to.not.be.empty; // 2. Assert no cell is empty\n  });\n  const cpuCell = [...$cells].find(td => td.innerText.includes('%')); // 3. Check if any CPU usage > 15%\n  if (cpuCell) {\n    const cpuValue = parseFloat(cpuCell.innerText.replace('%', ''));\n    if (cpuValue > 15) {\n      cpuAbove15Found = true;\n    }\n  }\n}).then(() => {\n  expect(cpuAbove15Found, \"CPU Usage above 15 not found\").to.be.false; // Final assertion after looping all rows\n});",
              "err": {},
              "uuid": "6c8d9e42-1d9d-4fa2-a5a5-50f73b2f1036",
              "parentUUID": "ac6b0180-bd14-4795-9d79-c500fd4553a2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6adf498d-0ef5-4b20-ba4a-c0f8f5bf0a60",
            "6c8d9e42-1d9d-4fa2-a5a5-50f73b2f1036"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6136,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}