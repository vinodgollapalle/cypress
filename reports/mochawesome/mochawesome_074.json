{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-12T09:35:41.564Z",
    "end": "2025-08-12T09:35:43.018Z",
    "duration": 1454,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f3916cf1-a00b-440d-84b4-98f8d300ab87",
      "title": "",
      "fullFile": "cypress\\e2e\\fetchAllnotesAPI.cy.js",
      "file": "cypress\\e2e\\fetchAllnotesAPI.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e0e70ff7-e3c4-44dd-96f6-a244a5e8a5a8",
          "title": "Fetch All Notes",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "create a new note",
              "fullTitle": "Fetch All Notes create a new note",
              "timedOut": null,
              "duration": 1028,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 2: Create a note\ncy.request({\n  method: 'POST',\n  url: 'https://practice.expandtesting.com/notes/api/notes',\n  headers: {\n    'x-auth-token': token,\n    'Content-Type': 'application/json'\n  },\n  body: {\n    title: noteTitle,\n    description: noteDescription,\n    category: 'Personal'\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  createdNoteId = response.body.data.id;\n  expect(createdNoteId).to.exist;\n});",
              "err": {},
              "uuid": "7528e18b-370a-4823-8d58-80e9de7d4ce5",
              "parentUUID": "e0e70ff7-e3c4-44dd-96f6-a244a5e8a5a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch all notes and contain the newly created note",
              "fullTitle": "Fetch All Notes should fetch all notes and contain the newly created note",
              "timedOut": null,
              "duration": 397,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 3: Fetch all notes\ncy.request({\n  method: 'GET',\n  url: 'https://practice.expandtesting.com/notes/api/notes',\n  headers: {\n    'x-auth-token': token\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('data');\n  expect(response.body.data).to.be.an('array');\n  // Step 4: Assert the created note exists in the array\n  const found = response.body.data.find(note =>\n  //note.id === createdNoteId && note.title === noteTitle\n  note.title === noteTitle && note.description === noteDescription);\n  expect(found, 'Newly created note should be in the list').to.exist;\n});",
              "err": {},
              "uuid": "5ea9e7da-775a-4455-99d9-b141ae9a2446",
              "parentUUID": "e0e70ff7-e3c4-44dd-96f6-a244a5e8a5a8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7528e18b-370a-4823-8d58-80e9de7d4ce5",
            "5ea9e7da-775a-4455-99d9-b141ae9a2446"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1425,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}