{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-14T15:51:14.404Z",
    "end": "2025-08-14T15:51:17.148Z",
    "duration": 2744,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e39e1d91-84dd-42cb-bb35-7bd58687a7f2",
      "title": "",
      "fullFile": "cypress\\e2e\\deleteNoteAPI.cy.js",
      "file": "cypress\\e2e\\deleteNoteAPI.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "830eb341-f6c0-4e8b-9935-d7b1149b3e96",
          "title": "Delete a test note and validate cleanup",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deletes a note and confirms deletion",
              "fullTitle": "Delete a test note and validate cleanup Deletes a note and confirms deletion",
              "timedOut": null,
              "duration": 2690,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: DELETE /notes/{id}\ncy.request({\n  method: 'DELETE',\n  url: `${baseUrl}/${noteId}`,\n  headers: {\n    Authorization: `Bearer ${token}`\n  },\n  failOnStatusCode: false\n}).then(response => {\n  // Step 2: Confirm status 204\n  expect(response.status).to.eq(200);\n});\n// Step 3: GET /notes and confirm note is gone\ncy.request({\n  method: 'GET',\n  url: baseUrl,\n  headers: {\n    Authorization: `Bearer ${token}`\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  //  //Validate the noteId no longer exists in the list\n  // const notes = response.body\n  // const found = notes.find(note => note.id === noteId)\n  // expect(found).to.be.undefined\n});",
              "err": {},
              "uuid": "e1029aa4-d8c1-4f7b-9067-02ffd9035b52",
              "parentUUID": "830eb341-f6c0-4e8b-9935-d7b1149b3e96",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e1029aa4-d8c1-4f7b-9067-02ffd9035b52"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2690,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}