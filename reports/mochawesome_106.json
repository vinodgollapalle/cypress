{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-14T15:55:53.875Z",
    "end": "2025-08-14T15:55:57.392Z",
    "duration": 3517,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9724e06b-4347-46ea-83bd-5476a88b268e",
      "title": "",
      "fullFile": "cypress\\e2e\\validatedynamiccontentTable_5.cy.js",
      "file": "cypress\\e2e\\validatedynamiccontentTable_5.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7d580421-5800-4479-a6fb-b1c0e199eac2",
          "title": "Validate Chrome CPU usage matches the label",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Locate Chrome Row and Compare its CPU value in the table with the yellow label ",
              "fullTitle": "Validate Chrome CPU usage matches the label Locate Chrome Row and Compare its CPU value in the table with the yellow label ",
              "timedOut": null,
              "duration": 3459,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://practice.expandtesting.com/dynamic-table');\n// Wait until Chrome row appears\ncy.get(\"table.table-striped tbody tr\").each($tr => {\n  const $td = $tr.find('td');\n  const browserName = $td.eq(0).text().trim();\n  if (browserName == 'Chrome') {\n    var _find;\n    const cpuUsageFromTable = (_find = [...$td].find(td => td.innerText.includes('%'))) === null || _find === void 0 ? void 0 : _find.innerText.trim();\n    cy.get('#chrome-cpu').invoke('text').then(fullText => {\n      const match = fullText.match(/(\\d+(\\.\\d+)?%)/);\n      const cpuUsageFromCard = match ? match[0] : null;\n      expect(cpuUsageFromCard).to.eq(cpuUsageFromTable);\n    });\n  }\n});",
              "err": {},
              "uuid": "f053c49e-88fc-4db4-b717-42fe919f1caa",
              "parentUUID": "7d580421-5800-4479-a6fb-b1c0e199eac2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f053c49e-88fc-4db4-b717-42fe919f1caa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3459,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}